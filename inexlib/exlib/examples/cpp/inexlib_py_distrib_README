
  To run:
    UNIX> <if using X11 graphics, arrange that your X11 environment is ok>
    UNIX> cd <installation_path>/inexlib_py/<version>

 ///////////////////////////////////////////////////////////////////////////////
 ///// Python setup: ///////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
 WARNING, ATTENTION, ACHTUNG: at this point you have to activate Python, but you must be aware
 than multiple Python installations may be present on your machine and you must be cautious
 to use the Python program corresponding to the Python toolkit used to compile and link
 the inlib_swig_py.so, exlib_offscreen_swig_py.so, exlib_window_swig_py.so and the compiled
 example applications. (On macOS, you may have a Python under /System and, if using Macports, another
 one somewhere under /opt/local and, if using an anaconda installation, another one within it).

  We provide the run (and spark_run) shell script to run the compiled application or launching
 the correct python on the .py scripts. You have to customize these scripts under "Python setup"
 to be sure to activate the Python used to build the inexlib_py kit. You have to look to have
 a correct "py_exe" variable and perhaps the correct LD_LIBRARY_PATH (DYLD_LIBRARY_PATH on macOS)
 environment variable to attach the correct shared libs. run (and spark_run) sets the PYTHONPATH, but
 it should be ok without customization. Then:
    UNIX> <edit run (spark_run) under "Python setup">

 ///////////////////////////////////////////////////////////////////////////////
 ///// run compiled apps: //////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
 To run C++ python apps:
    UNIX> ./run ./bin/hello_py
    UNIX> ./run ./bin/mandel_py           # this is a unitary test. If it passes it says nothing.
    UNIX> ./run ./bin/h1d_spy             # example using inlib SWIG wrapping.
    UNIX> ./run ./bin/plotter_spy_screen  # example using inlib/exlib SWIG wrapping doing a plot.

 To run pure C++ examples being client of the inexlib_serv application:
    <install and run the inexlib_serv application>
    UNIX> ./bin/cube_to_sg_serv -host=<ip_of_inexlib_serv_host> -port=<port_of_inexlib_serv>
    UNIX> ./bin/lego_to_sg_serv -host=<ip_of_inexlib_serv_host> -port=<port_of_inexlib_serv>
 (There is no Python in these, then there is no need to start them with "run").

 ///////////////////////////////////////////////////////////////////////////////
 ///// run Python apps: ////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
 To run non Spark .py examples:
    UNIX> ./run ./<example>.py
 for example:
    UNIX> ./run ./h1d.py                 # inlib histo.
    
 To run a Spark python example:
    UNIX> ./spark_run ./spark_<example>.py
 for example:     
    UNIX> ./spark_run ./spark_inlib_h1d_vis.py

 ///////////////////////////////////////////////////////////////////////////////
 ///// notes: //////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
  For the moment, the examples using the "gui viewer" must be run from the directory:
    <installation_path>/inexlib_py/<version>
 so that fonts and icon files within the ./res directory be found.
 
  On macOS, the windowing used by default is not X11 but straight Cocoa, then there
 is no need to "setup X11" here.

 ///////////////////////////////////////////////////////////////////////////////
 ///// list of non Spark Python examples: //////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
    h1d.py                 # inlib histo.
    rroot.py               # read an histo in a root file.
    waxml.py               # write histos at the AIDA XML file format.
    tree.py                # project a ntuple found in the pawdemo.root file
                           # and plot the histo.
    
    polyhedron_vis.py      # visualise a solid/shape boolean operation.
    plotter_window.py      # plot an histo by using softinex graphics and plotting.
                           # A simple viewer is used.
    plotter_vis.py         # same as upper but by using a more advanced "gui viewer".
    cfitsio_hst_vis.py     # visualise an image in a fits file.
    rdirs_vis.py           # random clouds of points in a plot.
    two_cubes_vis.pye      # show the "blender effect" on a coarse grained rearranged random points.
    
    c3d_vis.py             # create, fill and plot a 3D cloud of 3D random points.
    csv_c3d_vis.py         # read points from cosmo_dc2_rdz_cut.csv, fill and plot a 3D cloud.
    csv_h1d_vis.py         # read points from cosmo_dc2_rdz_cut.csv, fill and plot histos.
    csv_vertices_vis.py    # read points from cosmo_dc2_rdz_cut.csv, and visualize them
                           # with a simple viewer (without a plot).
    csv_vertices_gui_viewer_vis.py # same as upper, but by using a more advanced viewer.

 ///////////////////////////////////////////////////////////////////////////////
 ///// list of Python Spark examples: //////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
    spark_inlib_h1d_vis.py   # inlib histo.
    spark_fits.py            # open spark_test_data.fits and a simple collect.
    spark_fits_ntuple_vis.py # read a TBL in a fits file, do "ntuple projections" with Spark,
                             # and plot with the inexlib/plotter.
    spark_fits_vis.py        # open spark_test_data.fits, do a simple collect, fill and plot an histo.

 The scripts:						
    spark_parquet_vis.py
    spark_parquet_radec_vis.py
    spark_parquet_colored_galaxies_vis.py
 uses parquet files not in the distribution.

 ///////////////////////////////////////////////////////////////////////////////
 ///// ./run, ./spark_run options: /////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
  By default, the *_vis.py examples open and draw in a local window. The viewer used is in general
 a "gui viewer" and the behaviour of it is similar to the softinex apps (see softinex web pages in
 the softinex/"Apps general behaviour" section for that). If using ./run (./spark_run) to launch,
 for some examples you can use the "-window" to have a "simple viewer" (no GUI behaviour here).

  In the same way, on some examples you may use the "-offscreen" option to run offscreen and produce
 png and ps output file.

  Some examples support the "-client" option that permits to connect to a "inexlib_serv" application
 and send to it the scene graph that visualizes the data (for example a plot). If using this, you have
 to provide also the "-vis_host" and "-vis_port" options specifying the IP address of the host on which
 the inexlib_serv runs and the port it listens on. (When launching a inexlib_serv, you have to specify
 these). For example :
    <run somewhere a inexlib_serv application by specifying the ip of the host it runs on and a port>
    UNIX> ./run -vis_port <ip_of_inexlib_serv_host> -vis_port <port_of_inexlib_serv> cube_client.py 
    UNIX> ./run -client -vis_port <ip> -vis_port <port> polyhedron_vis.py
    UNIX> ./spark_run -client -vis_port <ip> -vis_port <port> spark_fits_vis.py

