#!/bin/sh -f

bush_home=`dirname $0`/../../../../bush

inlib_home=${bush_home}/../inexlib/inlib
exlib_home=${bush_home}/../inexlib/exlib

#set -x

build_clean=no
build_verbose_name=no

what=""
args=""
while test $# -ge 1 ; do
  case $1 in
    -verbose_name) build_verbose_name=yes;;
    -clean)  build_clean=yes;;

    -x11)    echo "-x11 not accepted";exit;;
    -X11)    echo "-X11 not accepted";exit;;
    -cocoa)  echo "-cocoa not accepted";exit;;
    -ios)    echo "-ios not accepted";exit;;
    -iossim) echo "-iossim not accepted";exit;;

    -*) args="${args} $1";;
     *) if [ $# = 1 ] ; then
          what=$1
        else         
        echo "exlib/examples/cpp/build : unknown option : $1"
        fi
        ;;
  esac
  shift
done

if [ ${build_clean} = "yes" ] ; then
  echo "exlib/examples/cpp/build : do it by hand."
  exit
fi

if [ "${what}" = "" ] ; then
  find . -maxdepth 1 -name '*.cpp' -exec ./build ${args} {} \;
  exit
fi
if [ `echo ${what} | sed -e 's:\*::g'` != ${what} ] ; then
  find . -maxdepth 1 -name ${what} -exec ./build ${args} {} \;
  exit
fi

base_name=`basename ${what}`

#if [ "`echo ${base_name} | grep '\.f'`" != "" ] ; then exit; fi
if [ ${base_name} = "chbook.cpp" ] ; then exit ;fi
if [ ${base_name} = "whbook.cpp" ] ; then exit ;fi

#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
suffix=
if [ `echo ${base_name} | sed -e 's:\.cpp::g'` != ${base_name} ] ; then
  suffix=cpp
elif [ `echo ${base_name} | sed -e 's:\.c::g'` != ${base_name} ] ; then
  suffix=c
elif [ `echo ${base_name} | sed -e 's:\.f::g'` != ${base_name} ] ; then
  suffix=f
elif [ `echo ${base_name} | sed -e 's:\.mm::g'` != ${base_name} ] ; then
  suffix=mm
elif [ `echo ${base_name} | sed -e 's:\.ecpp::g'` != ${base_name} ] ; then
  suffix=ecpp
fi

if [ "${suffix}" = "" ] ; then echo 'exlib/examples/cpp/build : suffix not treated';fi

name="${base_name}"
name=`echo ${name} | sed -e 's:\.cpp::g'`
name=`echo ${name} | sed -e 's:\.c::g'`
name=`echo ${name} | sed -e 's:\.f::g'`
name=`echo ${name} | sed -e 's:\.ecpp::g'`
#name=`echo ${name} | sed -e 's:./::g'`

if [ ${name} = "moc_Qt" ] ; then exit ;fi

. ${bush_home}/on_where

build_geant4_10x=yes
if [ ${base_name} = "clhep.cpp" ] ; then
  if [ ${on_my_win_xp} = yes ] ; then
    echo 'enforce geant4/95 on this machine.'
    build_geant4_10x=no
  else    
    if [ ${on_macpro4} = yes ] ; then #clang++ knows c++11, but we do not have libc++ here.
      args="${args} -gnu"
    fi	
    args="${args} -c++11 -bdir_suffix=_c++11"
  fi
fi

if [ ${base_name} = "hello_cling.cpp" ] ; then
  args="${args} -c++11 -bdir_suffix=_c++11"
fi

#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
build_args="${args}"
. ${bush_home}/exlib_header

build_distrib=no

if [ ${build_verbose} = yes -o ${build_verbose_name} = yes ] ; then echo "exlib/examples/cpp/build ${name} ...";fi

#//////////////////////////////////////////////////////////
#/// look for //exlib_build_use in the ${what} file ///////
#//////////////////////////////////////////////////////////
auto_use_pack=exlib
auto_use_file="${base_name}"
. ${bush_home}/auto_use

#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////

if [ "${use_xerces}" = "yes" ] ; then
  echo "exlib/examples/cpp/build : ourex xercesc not yet ready."
  exit
fi

if [ "${use_cexpr}" = "yes" ] ; then
  cppfiles="${cppfiles} ${exlib_home}/exlib/yacc/cexpr_lexer.cpp"
  cppfiles="${cppfiles} ${exlib_home}/exlib/yacc/cexpr_eval.cpp"
fi

if [ "${use_csz}" = "yes" ] ; then
  cppflags="${cppflags} -DINLIB_USE_CSZ"
fi

#/////////////////////////////////////////////////////////
#/// not automatic flags /////////////////////////////////
#/////////////////////////////////////////////////////////

if [ ${build_no_gl} = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    use_DirectX=yes
  else	
    use_GLX=no
  fi
  use_GL=no
fi

if [ ${name} = "sg_povama_X11" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    echo "exlib/examples/cpp/build : WARNING : today -DEXLIB_HAS_VBO not supported."
  else
    cppflags="${cppflags} -DEXLIB_HAS_VBO"
  fi
fi

if [ ${name} = "plotter_slua_screen" -o ${name} = "plotter_spy_screen" -o ${name} = "h1d_slua" -o ${name} = "h1d_spy" ] ; then
  if [ ${build_visual} = "yes" ] ; then cppflags="${cppflags} -bigobj";fi
fi

#/////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////
  
. ${bush_home}/use/Qt

if [ ${name} = "GL_Qt" ] ; then
  cppfiles="${cppfiles} moc_Qt.cpp"
  ${moc_exe} -o moc_Qt.cpp Qt.h
  to_rm="${to_rm} moc_Qt.cpp"
fi

# -Wshadow is a pain with CLHEP.
# With -pedantic and coin3d/3.1.3 and G4_cppflags, we have the error :
#   HEPVis/source/SoSFPolyhedron.cxx:7: error: extra ~;~
#cppflags="${G4_cppflags} ${cppflags}"

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

if [ "${use_screen}" = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    use_Windows=yes
  else
    use_X11=yes
    use_GLX=yes
  fi
fi

. ${bush_home}/use/inlib
. ${bush_home}/use/exlib

#/////////////////////////////////
#/// gui and windowing : /////////
#/////////////////////////////////
. ${bush_home}/use/CoinXt
. ${bush_home}/use/CoinWin
. ${bush_home}/use/CoinGtk
. ${bush_home}/use/CoinQt

. ${bush_home}/use/wx

. ${bush_home}/use/gtkglarea
. ${bush_home}/use/gtk

. ${bush_home}/use/Xm
. ${bush_home}/use/XmOpenGLArea

. ${bush_home}/use/GLX  # before X11
. ${bush_home}/use/X11
. ${bush_home}/use/Windows
. ${bush_home}/use/DirectX
. ${bush_home}/use/Cocoa

#/////////////////////////////////
#/// graphics : //////////////////
#/////////////////////////////////
. ${bush_home}/use/HEPVis  # needs png jpeg freetype
. ${bush_home}/use/CoinGL  # must be after use_X11 (because of GLX)

. ${bush_home}/use/Xpm

. ${bush_home}/use/GL

#/////////////////////////////////
#/// over C/C++ only /////////////
#/////////////////////////////////
. ${bush_home}/use/gl2ps
. ${bush_home}/use/csz
. ${bush_home}/use/freetype
. ${bush_home}/use/jpeg
. ${bush_home}/use/expat
. ${bush_home}/use/spiapp
. ${bush_home}/use/SOPI
. ${bush_home}/use/SOPHYA
. ${bush_home}/use/cfitsio
. ${bush_home}/use/hdf5
. ${bush_home}/use/tntnet

. ${bush_home}/use/zip
. ${bush_home}/use/png
. ${bush_home}/use/zlib
. ${bush_home}/use/sqlite
. ${bush_home}/use/glutess
. ${bush_home}/use/boost
. ${bush_home}/use/graphviz
. ${bush_home}/use/dcmtk
. ${bush_home}/use/gsl
. ${bush_home}/use/gmp
. ${bush_home}/use/arb
. ${bush_home}/use/flint
. ${bush_home}/use/yajl

. ${bush_home}/use/AIDA
. ${bush_home}/use/aida_config

if [ ${build_geant4_10x} = yes ] ; then
  . ${bush_home}/use/geant4_10_03_p01
else
  . ${bush_home}/use/geant4
fi

. ${bush_home}/use/cern_root # :-(
. ${bush_home}/use/pythia8
. ${bush_home}/use/Getline
. ${bush_home}/use/Python
. ${bush_home}/use/lua
. ${bush_home}/use/cling
. ${bush_home}/use/mpi

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////
. ${bush_home}/use/cernlib

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////
. ${bush_home}/use/socket
. ${bush_home}/use/thread
. ${bush_home}/use/dl
. ${bush_home}/use/util

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

app_src=${base_name}
app_exe=${name}
app_name=${name}

. ${bush_home}/application

/bin/rm -f ${objs}
/bin/rm -f ${to_rm}
