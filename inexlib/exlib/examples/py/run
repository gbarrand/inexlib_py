#!/bin/bash

# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file exlib.license for terms.

#/////////////////////////////////////////////////////////////////
#/// arguments : /////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////

run_dir="`dirname $0`"

run_verbose=no
run_set_x=no

run_gdb=no

run_vis_mode=gui_window
run_vis_host=
run_vis_port=
run_vis_format=
run_file=
run_help=no

run_args=

py_args=
what=

while test $# -ge 1 ; do
  case $1 in
    -h)       run_help=yes;    run_args="${run_args} $1";;
    -x)       run_set_x=yes;   run_args="${run_args} $1";;
    -verbose) run_verbose=yes; run_args="${run_args} $1";;
    -v)       run_verbose=yes; run_args="${run_args} $1";;
    -gdb)     run_gdb=yes;;

    -offscreen)  run_vis_mode=offscreen;  run_args="${run_args} $1";;
    -gui_window) run_vis_mode=gui_window; run_args="${run_args} $1";;
    -window)     run_vis_mode=window;     run_args="${run_args} $1";;
    -client)     run_vis_mode=client;     run_args="${run_args} $1";;

    -vis_host)   run_args="${run_args} $1"
                 if [ $# -ge 2 ] ; then
                   run_vis_host=$2
                   run_args="${run_args} $2"
                   shift
                 fi
                 ;;
    -vis_port)   run_args="${run_args} $1"
                 if [ $# -ge 2 ] ; then
                   run_vis_port=$2
                   run_args="${run_args} $2"
                   shift
                 fi
                 ;;
    -vis_format) run_args="${run_args} $1"
                 if [ $# -ge 2 ] ; then
                   run_vis_format=$2
                   run_args="${run_args} $2"
                   shift
                 fi
                 ;;

    -file) if [ $# -ge 2 ] ; then run_file=$2;shift; fi;;

    -number_of_points) if [ $# -ge 2 ] ; then py_args="${py_args} -number_of_points $2";shift; fi;;
    
    -*) run_args="${run_args} $1";;  
     *) if [ "${what}" = "" ] ; then
          what=$1
        else         
          run_args="${run_args} $1"
        fi
        ;;
  esac
  shift
done

if [ ${run_help} = yes ] ; then
  echo '//////////////////////////////////////////////////////////////////////////////////'    
  echo '/// this script usage : //////////////////////////////////////////////////////////'
  echo '//////////////////////////////////////////////////////////////////////////////////'
  echo '  UNIX> ./run <options> <python script>'
  echo 'Example :'
  echo '  UNIX> ./run c3d_vis.py'
  echo '  UNIX> ./run -offscreen c3d_vis.py  # it produces a out_c3d_vis.png and out_c3d_vis.ps'
  echo ' '
  echo 'This script options :'
  echo '-h                         : show this message.'
  echo '-x                         : bash full verbose mode. It set "set -x".'
  echo '-v, -verbose               : dump PYTHONPATH and, if applicable, PATH, LD_LIBRARY_PATH.'
  echo '-gdb                       : run a debugger (lldb on macOS, gdb on Linux) on the Python program.'
  echo '-gui_window                : set Python option -vis_mode to "gui_window". It is the default.'
  echo '-offscreen                 : set Python option -vis_mode to "offscreen".'
  echo '-window                    : set Python option -vis_mode to "window".'
  echo '                             There is no GUI in this mode, just open a window and display a scene graph.'
  echo '-client                    : set Python option -vis_mode to "client".'
  echo '-vis_host <IP>             : if vis_mode is "client", permit to pass the host IP where a inexlib_serv is running.'
  echo '-vis_port <port>           : if vis_mode is "client", permit to pass the port on which a inexlib_serv is listening.'
  echo '-vis_format [bsg,<else>]   : if vis_mode is "offscreen", permit to give the output file format.'
  echo '                             If "bsg", a out_<script>.bsg file is produced.'
  echo '                             BSG is for "Binary Scene Graph" file format. It is a inlib/exlib file format'
  echo '                             used to stream a scene graph in a binary file or in a buffer to be passed'
  echo '                             to a listening inexlib_serv application.'
  echo '                             If not "bsg", a out_<script>.ps and a out_<script>.png are produced.'
  echo '-file <file>               : if applicable, permit to give a data file.'
  echo '-number_of_points <number> : if applicable, permit to pass the number of points to create.'

  if [ "${what}" = "" ] ; then exit; fi
fi

if [ ${run_set_x} = "yes" ] ; then set -x; fi

if [ "${what}" = "all" ] ; then
  find . -maxdepth 1 -name '*.py' -not -name 'spark*.py' -print -exec ./run ${run_args} {} \;
  exit
fi

if [ "${what}" = "" ] ; then
  # In the below, <bin_path>/<program> in case of running from inexlib_py distribution.
  echo 'run : give a python script or a <bin_path>/<program> if in an inexlib_py distrib packing.'
  exit
fi

if [ "`echo ${what} | sed -e 's:spark_::g'`" != "${what}" ] ; then
  echo "run : skip ${what}. Execute it with ./spark_run_[local,cluster]."
  exit
fi

if [ ! -f ${what} ] ; then
  echo "run : ${what} not found."
  exit
fi

if [ ${run_help} = yes ] ; then
  echo '  '
  echo '//////////////////////////////////////////////////////////////////////////////////'    
  echo '/// .py arguments : //////////////////////////////////////////////////////////////'    
  echo '//////////////////////////////////////////////////////////////////////////////////'    
  py_args="${py_args} -h"
fi

base_name="`basename ${what}`"
suffix=`echo ${base_name} | sed 's:.*\.::'`
if [ "${suffix}" != "${base_name}" ] ; then
  name=`echo ${base_name} | sed -e "s:\.${suffix}::g"`
else
  name="${base_name}"
fi

if [ `uname` = "Darwin" ] ; then
  items="cfitsio_hst_mt.py cfitsio_hst_mp.py plotter_mt.py"
  for item in ${items} ; do
    if [ "${base_name}" = ${item} ] ; then
      echo 'run : it does not work (yet) on macOS/Cocoa.'
      exit
    fi       
  done
fi

items="polyhedron_vis.py c3d_vis.py two_cubes_vis.py colored_sized_points_vis.py cfitsio_hst_vis.py tree.py"
items="${items} plotter_vis.py csv_c3d_vis.py csv_h1d_vis.py csv_vertices_vis.py csv_vertices_gui_viewer_vis.py"
items="${items} rdirs_vis.py vertices_vis.py"
for item in ${items} ; do
  #echo ${item}
  if [ "${base_name}" = ${item} ] ; then
    py_args="${py_args} -vis_mode ${run_vis_mode}"
    if [ "${run_vis_mode}" = "client" ] ; then
      if [ "${run_vis_host}" = "" ] ; then
        echo 'run : you have to pass a -vis_host argument.'
        exit      
      fi
      py_args="${py_args} -vis_host ${run_vis_host}"
      if [ "${run_vis_port}" = "" ] ; then
        echo 'run : you have to pass a -vis_port argument.'
        exit      
      fi
      py_args="${py_args} -vis_port ${run_vis_port}"
    fi
  fi    
done

items="csv_c3d_vis.py csv_h1d_vis.py csv_vertices_vis.py csv_vertices_gui_viewer_vis.py"
for item in ${items} ; do
  if [ "${base_name}" = ${item} ] ; then
    if [ "${run_file}" = "" ] ; then
      run_file_name=cosmo_dc2_rdz_cut.csv
      run_file="${run_dir}/../../data/${run_file_name}"
      if [ ! -f ${run_file} ] ; then
        run_file="${run_dir}/data/${run_file_name}"  # if running from inexlib_py distribution.
        if [ ! -f ${run_file} ] ; then
          echo "run : data file ${run_file_name} not found."
          exit      
        fi
      fi
    fi
    py_args="${py_args} -file ${run_file}"
  fi
done

items="c3d_vis.py tree.py vertices_vis.py"
for item in ${items} ; do
  if [ "${base_name}" = ${item} ] ; then
    if [ "${run_vis_mode}" = "offscreen" -a "${run_vis_format}" != "" ] ; then
      py_args="${py_args} -vis_format ${run_vis_format}"
    fi
  fi
done

if [ "${base_name}" = "plotter_window.py" ] ; then
  if [ "${run_vis_mode}" = "offscreen" ] ; then
    echo "run : -offscreen not relevant for ${base_name}."
    exit      
  fi
  if [ "${run_vis_mode}" = "client" ] ; then
    echo "run : -client not relevant for ${base_name}."
    exit      
  fi
fi

if [ "${base_name}" = cube_client.py ] ; then
  if [ "${run_vis_mode}" != "client" ] ; then
    echo "run : ${run_vis_mode} not relevant for ${base_name}."
    exit      
  fi
  if [ "${run_vis_host}" = "" ] ; then
    echo 'run : you have to pass a -vis_host argument.'
    exit      
  fi
  py_args="${py_args} -vis_host ${run_vis_host}"
  if [ "${run_vis_port}" = "" ] ; then
    echo 'run : you have to pass a -vis_port argument.'
    exit      
  fi
  py_args="${py_args} -vis_port ${run_vis_port}"
fi

#/////////////////////////////////////////////////////////////////
#/// where : /////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////
if [ -x ${run_dir}/modules/inlib_swig_py.so ] ; then
  # running from an inexlib_py distribution :
  build_path=${run_dir}/bin    
  modules_path=${run_dir}/modules
else    
  BUSH_BUILD_ROOT_PATH="${run_dir}";export BUSH_BUILD_ROOT_PATH
  build_args=
  bush_home=${run_dir}/../../../../bush
  . ${bush_home}/header  # to get build_path
  modules_path=${build_path}
fi

EXLIB_RES_DIR=${run_dir}/res;export EXLIB_RES_DIR

run_use_py3=no
if [ "`${build_path}/which_py`" = Python3 ] ; then run_use_py3=yes;fi    

on_lal_spark_cluster=no
if [ `uname -n` = vm-75222.lal.in2p3.fr ] ; then on_lal_spark_cluster=yes;fi

#/////////////////////////////////////////////////////////////////
#/// Python setup : //////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////

# WARNING : the Python program must be the one of the Python used to build
#           the plugins inlib_swig_py.so, exlib_[offscreen,window]_swig_py.so.

py_exe=
spy_dir=spy
if [ ${on_lal_spark_cluster} = yes ] ; then
  if [ ${run_use_py3} = yes ] ; then
    ld_path=/usr/lib64:/data2/anaconda3-5.2.0/lib
    LD_PRELOAD=/usr/lib64/libexpat.so.1.6.0  # to avoid libGL using the anaconda libexpat.
    export LD_PRELOAD
    py_exe=/opt/anaconda/bin/python3.6
    spy_dir=spy3    
  else
    py_exe=/usr/bin/python2.7
  fi
else
  if [ ${run_use_py3} = yes ] ; then
    if [ "`uname | grep CYGWIN`" != "" ] ; then
      py_exe=/cygdrive/c/Users/barrand/AppData/Local/Programs/Python/Python36/python.exe
    elif [ `uname` = "Darwin" ] ; then
      py_exe=/opt/local/bin/python3.6
    elif [ -e /opt/python/3.6.5.1/bin/python3.6 ] ; then  #cori.nersc.
      py_exe=/opt/python/3.6.5.1/bin/python3.6
      ld_path=/opt/python/3.6.5.1/lib
    elif [ -e /usr/local/Python/3.6.6/bin/python3.6 ] ; then  #ostackc.
      py_exe=/usr/local/Python/3.6.6/bin/python3.6
      ld_path=/usr/local/Python/3.6.6/lib
    elif [ -e /usr/bin/python3.4m ] ; then  #ostacku.
      py_exe=/usr/bin/python3.4m
      #ld_path=/usr/lib/x86_64-linux-gnu
    fi      
    spy_dir=spy3    
  else
    c_drive=/cygdrive/c
    if [ -d "${c_drive}/usr/local/Python27" ] ; then
      py_exe="${c_drive}/usr/local/Python27/python.exe"
    elif [ -d "${c_drive}/Python27" ] ; then
      py_exe="${c_drive}/Python27/python.exe"
    elif [ `uname` = Darwin ] ; then
      py_exe=/opt/local/bin/pythonw2.7
    elif [ -f /usr/bin/python2.7 ] ; then
      py_exe=/usr/bin/python2.7
    elif [ -f /usr/bin/python2.6 ] ; then #lal/lx
      py_exe=/usr/bin/python2.6
    fi      
  fi
fi    

if [ ! -e ${py_exe} ] ; then
  echo "run : python program ${py_exe} not found."
  exit    
fi    

#/////////////////////////////////////////////////////////////////
#/// PYTHONPATH : ////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////

sep=':'
if [ "`uname | grep CYGWIN`" != "" ] ; then sep=';' ;fi

py_path="${run_dir}/res/py"
py_path="${py_path}${sep}${run_dir}/res/${spy_dir}"
py_path="${py_path}${sep}${modules_path}"

py_curr=`printenv PYTHONPATH`
if [ "${py_curr}" = "" ] ; then
  PYTHONPATH="${py_path}"
  export PYTHONPATH
else
  not_in=`echo "${py_curr}" | grep "${py_path}" `
  if [ "${not_in}" = "" ] ; then
    PYTHONPATH="${PYTHONPATH}${sep}${py_path}"
    export PYTHONPATH
  fi
fi
unset py_curr
unset py_path

if [ ${run_verbose} = yes ] ; then
  echo 'PYTHONPATH :'
  printenv PYTHONPATH
fi
  
#/////////////////////////////////////////////////////////////////
#/// LD_LIBRARY_PATH : ///////////////////////////////////////////
#/////////////////////////////////////////////////////////////////
if [ "${ld_path}" != "" ] ; then
    
if [ "`uname | grep CYGWIN`" != "" ] ; then
  ld_curr=`printenv PATH`
  if [ "${ld_curr}" = "" ] ; then
    PATH="${ld_path}"
    export PATH
  else
    not_in=`echo "${ld_curr}" | grep "${ld_path}" `
    if [ "${not_in}" = "" ] ; then
      PATH="${PATH}:${ld_path}"
      export PATH
    fi
  fi
  unset ld_curr
  unset ld_path

  if [ ${run_verbose} = yes ] ; then
    echo 'PATH :'
    printenv PATH
  fi
  
elif [ `uname` = "Linux" ] ; then
  ld_curr=`printenv LD_LIBRARY_PATH`
  if [ "${ld_curr}" = "" ] ; then
    LD_LIBRARY_PATH="${ld_path}"
    export LD_LIBRARY_PATH
  else
    not_in=`echo "${ld_curr}" | grep "${ld_path}" `
    if [ "${not_in}" = "" ] ; then
      LD_LIBRARY_PATH="${LD_LIBRARY_PATH}${sep}${ld_path}"
      export LD_LIBRARY_PATH
    fi
  fi
  unset ld_curr
  unset ld_path
  if [ ${run_verbose} = yes ] ; then
    echo 'LD_LIBRARY_PATH :'
    printenv LD_LIBRARY_PATH
  fi
fi

fi #ld_path

if [ ${run_verbose} = yes ] ; then
  py_args="${py_args} -verbose True"
fi

#/////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////
gdb_exe=gdb
if [ `uname` = "Darwin" ] ; then gdb_exe=lldb;fi

#/////////////////////////////////////////////////////////////////
#/// run : ///////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////
# if running from inexlib_py distribution :
items="cube_to_sg_serv h1d_spy hello_py lego_to_sg_serv mandel_py plotter_spy_screen"
found_exe=no
for item in ${items} ; do
  if [ "${base_name}" = ${item} ] ; then
    found_exe=yes
    ${build_path}/${base_name}	
  fi
done

if [ ${found_exe} = no ] ; then
  if [ "${name}" = plotter_mt -o "${name}" = cfitsio_hst_mt -o "${name}" = cfitsio_hst_mp ] ; then
    echo "run : within the Python prompt, do 'import ${name}'"
    ${py_exe}
  else
    if [ ${run_gdb} = yes ] ; then
      echo "type : r ${what} ${py_args}"
      ${gdb_exe} ${py_exe}	
    else
      ${py_exe} ${what} ${py_args}
    fi	 
  fi
fi
