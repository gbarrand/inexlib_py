// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_Windows_plotter
#define exlib_Windows_plotter

#include "session"
#include "window"
#include "glarea"

#include "../sg/viewer"
#include "../sg/text_freetype"

#include <inlib/sg/noderef>
#include <inlib/sg/ortho>
#include <inlib/sg/h2plot_cp>
#include <inlib/sg/f2plot>
#include <inlib/sg/xy2plot>
#include <inlib/sg/fit2plot>
#include <inlib/sg/cloud2plot_cp>
#include <inlib/sg/plots>
#include <inlib/sys/dir>

// disable the warning about the usage of "this" in the constructor.
#pragma warning(disable:4355)

namespace exlib {
namespace Windows {

class plotter : public window, public sg::viewer  {
  typedef window parent_window;
  typedef sg::viewer parent_viewer;
public:
  plotter(session& a_session,
          unsigned int a_cols = 1,unsigned int a_rows = 1,
          int a_x = 0,int a_y = 0,
          unsigned int a_width = 500,unsigned int a_height = 500,
          const std::string& /*a_win_title*/ = "")
  :parent_window(a_width,a_height)
  ,parent_viewer(a_session.out(),a_width,a_height)
  ,m_session(a_session)
  ,m_ttf() //before m_plots.
  ,m_plots(m_ttf)
  ,m_glarea(m_hwnd,*this,m_plots)
  {
    //////////////////////////////////////////////////////////
    /// windowing ////////////////////////////////////////////
    //////////////////////////////////////////////////////////
    if(!m_hwnd) return; //throw

    //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////
   {std::string path = "."+inlib::sep()+"res";
    if(inlib::dir::is_a(path)) inlib::env_append_path("EXLIB_FONT_PATH",path);}
   {std::string path = ".."+inlib::sep()+"res";
    if(inlib::dir::is_a(path)) inlib::env_append_path("EXLIB_FONT_PATH",path);}
    
    //////////////////////////////////////////////////////////
    /// scene graph //////////////////////////////////////////
    //////////////////////////////////////////////////////////
    inlib::sg::separator* sep = new inlib::sg::separator;

    // camera set below.
    m_camera.height = 1;
    float z = 4*1; //plotter.depth = 1;
    m_camera.znear = 0.1f*z;
    m_camera.zfar = 10*z; //100*z induces problems with lego rendering.
    m_camera.position = inlib::vec3f(0,0,z);
    m_camera.orientation = inlib::rotf(inlib::vec3f(0,0,1),0);
    m_camera.focal = z;
    sep->add(new inlib::sg::noderef(m_camera));

    m_plots.cols = a_cols;
    m_plots.rows = a_rows;
    m_plots.adjust_size(a_width,a_height);

    sep->add(new inlib::sg::noderef(m_plots));

    sg().add(sep); //give sep ownership to the viewer.
    
  }
  virtual ~plotter() {}
protected:
  plotter(const plotter& a_from)
  :parent_window(a_from)
  ,parent_viewer(a_from)
  ,m_session(a_from.m_session)
  ,m_camera(a_from.m_camera)
  ,m_plots(a_from.m_plots)
  ,m_glarea(a_from.m_glarea)
  {}
  plotter& operator=(const plotter& a_from){
    window::operator=(a_from);
    m_camera = a_from.m_camera;
    m_plots = a_from.m_plots;
    return *this;
  }
public:
  bool has_window() const {return m_hwnd?true:false;} //for SWIG

  HWND window() const {return m_hwnd;}

  bool show() {
    if(!m_hwnd) return false;
    m_session.show_window(m_hwnd);
    return true;
  }

  bool steer() {return m_session.steer();}
  
public:

#include "../plotter_common.icc"

protected:
  class _glarea : public glarea {
  public:
    virtual void paint(unsigned int a_w,unsigned int a_h) {
      m_plots.adjust_size(a_w,a_h);
      m_viewer.set_size(a_w,a_h);
      m_viewer.render();
    }
  public:
    _glarea(HWND a_parent,
            parent_viewer& a_viewer,
            inlib::sg::plots& a_plots)
    :glarea(a_parent)
    ,m_viewer(a_viewer)
    ,m_plots(a_plots)
    {}
  protected:
    parent_viewer& m_viewer;
    inlib::sg::plots& m_plots;
  };
    
protected:
  session& m_session;
  inlib::sg::ortho m_camera;
  sg::text_freetype m_ttf;
  inlib::sg::plots m_plots;
  _glarea m_glarea;
};

}}

//exlib_build_use inlib inlib_glutess freetype
//exlib_build_use Windows

#endif
