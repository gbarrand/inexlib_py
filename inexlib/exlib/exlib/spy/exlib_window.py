# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('exlib_window_swig_py', [dirname(__file__)])
        except ImportError:
            import exlib_window_swig_py
            return exlib_window_swig_py
        if fp is not None:
            try:
                _mod = imp.load_module('exlib_window_swig_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    exlib_window_swig_py = swig_import_helper()
    del swig_import_helper
else:
    import exlib_window_swig_py
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return exlib_window_swig_py.SwigPyIterator_value(self)
    def incr(self, n=1): return exlib_window_swig_py.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return exlib_window_swig_py.SwigPyIterator_decr(self, n)
    def distance(self, *args): return exlib_window_swig_py.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return exlib_window_swig_py.SwigPyIterator_equal(self, *args)
    def copy(self): return exlib_window_swig_py.SwigPyIterator_copy(self)
    def next(self): return exlib_window_swig_py.SwigPyIterator_next(self)
    def __next__(self): return exlib_window_swig_py.SwigPyIterator___next__(self)
    def previous(self): return exlib_window_swig_py.SwigPyIterator_previous(self)
    def advance(self, *args): return exlib_window_swig_py.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return exlib_window_swig_py.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return exlib_window_swig_py.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return exlib_window_swig_py.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return exlib_window_swig_py.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return exlib_window_swig_py.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return exlib_window_swig_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = exlib_window_swig_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class std_vector_uint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return exlib_window_swig_py.std_vector_uint_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return exlib_window_swig_py.std_vector_uint___nonzero__(self)
    def __bool__(self): return exlib_window_swig_py.std_vector_uint___bool__(self)
    def __len__(self): return exlib_window_swig_py.std_vector_uint___len__(self)
    def pop(self): return exlib_window_swig_py.std_vector_uint_pop(self)
    def __getslice__(self, *args): return exlib_window_swig_py.std_vector_uint___getslice__(self, *args)
    def __setslice__(self, *args): return exlib_window_swig_py.std_vector_uint___setslice__(self, *args)
    def __delslice__(self, *args): return exlib_window_swig_py.std_vector_uint___delslice__(self, *args)
    def __delitem__(self, *args): return exlib_window_swig_py.std_vector_uint___delitem__(self, *args)
    def __getitem__(self, *args): return exlib_window_swig_py.std_vector_uint___getitem__(self, *args)
    def __setitem__(self, *args): return exlib_window_swig_py.std_vector_uint___setitem__(self, *args)
    def append(self, *args): return exlib_window_swig_py.std_vector_uint_append(self, *args)
    def empty(self): return exlib_window_swig_py.std_vector_uint_empty(self)
    def size(self): return exlib_window_swig_py.std_vector_uint_size(self)
    def clear(self): return exlib_window_swig_py.std_vector_uint_clear(self)
    def swap(self, *args): return exlib_window_swig_py.std_vector_uint_swap(self, *args)
    def get_allocator(self): return exlib_window_swig_py.std_vector_uint_get_allocator(self)
    def begin(self): return exlib_window_swig_py.std_vector_uint_begin(self)
    def end(self): return exlib_window_swig_py.std_vector_uint_end(self)
    def rbegin(self): return exlib_window_swig_py.std_vector_uint_rbegin(self)
    def rend(self): return exlib_window_swig_py.std_vector_uint_rend(self)
    def pop_back(self): return exlib_window_swig_py.std_vector_uint_pop_back(self)
    def erase(self, *args): return exlib_window_swig_py.std_vector_uint_erase(self, *args)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_std_vector_uint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return exlib_window_swig_py.std_vector_uint_push_back(self, *args)
    def front(self): return exlib_window_swig_py.std_vector_uint_front(self)
    def back(self): return exlib_window_swig_py.std_vector_uint_back(self)
    def assign(self, *args): return exlib_window_swig_py.std_vector_uint_assign(self, *args)
    def resize(self, *args): return exlib_window_swig_py.std_vector_uint_resize(self, *args)
    def insert(self, *args): return exlib_window_swig_py.std_vector_uint_insert(self, *args)
    def reserve(self, *args): return exlib_window_swig_py.std_vector_uint_reserve(self, *args)
    def capacity(self): return exlib_window_swig_py.std_vector_uint_capacity(self)
    __swig_destroy__ = exlib_window_swig_py.delete_std_vector_uint
    __del__ = lambda self : None;
std_vector_uint_swigregister = exlib_window_swig_py.std_vector_uint_swigregister
std_vector_uint_swigregister(std_vector_uint)

class std_vector_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return exlib_window_swig_py.std_vector_int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return exlib_window_swig_py.std_vector_int___nonzero__(self)
    def __bool__(self): return exlib_window_swig_py.std_vector_int___bool__(self)
    def __len__(self): return exlib_window_swig_py.std_vector_int___len__(self)
    def pop(self): return exlib_window_swig_py.std_vector_int_pop(self)
    def __getslice__(self, *args): return exlib_window_swig_py.std_vector_int___getslice__(self, *args)
    def __setslice__(self, *args): return exlib_window_swig_py.std_vector_int___setslice__(self, *args)
    def __delslice__(self, *args): return exlib_window_swig_py.std_vector_int___delslice__(self, *args)
    def __delitem__(self, *args): return exlib_window_swig_py.std_vector_int___delitem__(self, *args)
    def __getitem__(self, *args): return exlib_window_swig_py.std_vector_int___getitem__(self, *args)
    def __setitem__(self, *args): return exlib_window_swig_py.std_vector_int___setitem__(self, *args)
    def append(self, *args): return exlib_window_swig_py.std_vector_int_append(self, *args)
    def empty(self): return exlib_window_swig_py.std_vector_int_empty(self)
    def size(self): return exlib_window_swig_py.std_vector_int_size(self)
    def clear(self): return exlib_window_swig_py.std_vector_int_clear(self)
    def swap(self, *args): return exlib_window_swig_py.std_vector_int_swap(self, *args)
    def get_allocator(self): return exlib_window_swig_py.std_vector_int_get_allocator(self)
    def begin(self): return exlib_window_swig_py.std_vector_int_begin(self)
    def end(self): return exlib_window_swig_py.std_vector_int_end(self)
    def rbegin(self): return exlib_window_swig_py.std_vector_int_rbegin(self)
    def rend(self): return exlib_window_swig_py.std_vector_int_rend(self)
    def pop_back(self): return exlib_window_swig_py.std_vector_int_pop_back(self)
    def erase(self, *args): return exlib_window_swig_py.std_vector_int_erase(self, *args)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_std_vector_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return exlib_window_swig_py.std_vector_int_push_back(self, *args)
    def front(self): return exlib_window_swig_py.std_vector_int_front(self)
    def back(self): return exlib_window_swig_py.std_vector_int_back(self)
    def assign(self, *args): return exlib_window_swig_py.std_vector_int_assign(self, *args)
    def resize(self, *args): return exlib_window_swig_py.std_vector_int_resize(self, *args)
    def insert(self, *args): return exlib_window_swig_py.std_vector_int_insert(self, *args)
    def reserve(self, *args): return exlib_window_swig_py.std_vector_int_reserve(self, *args)
    def capacity(self): return exlib_window_swig_py.std_vector_int_capacity(self)
    __swig_destroy__ = exlib_window_swig_py.delete_std_vector_int
    __del__ = lambda self : None;
std_vector_int_swigregister = exlib_window_swig_py.std_vector_int_swigregister
std_vector_int_swigregister(std_vector_int)

class std_vector_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return exlib_window_swig_py.std_vector_float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return exlib_window_swig_py.std_vector_float___nonzero__(self)
    def __bool__(self): return exlib_window_swig_py.std_vector_float___bool__(self)
    def __len__(self): return exlib_window_swig_py.std_vector_float___len__(self)
    def pop(self): return exlib_window_swig_py.std_vector_float_pop(self)
    def __getslice__(self, *args): return exlib_window_swig_py.std_vector_float___getslice__(self, *args)
    def __setslice__(self, *args): return exlib_window_swig_py.std_vector_float___setslice__(self, *args)
    def __delslice__(self, *args): return exlib_window_swig_py.std_vector_float___delslice__(self, *args)
    def __delitem__(self, *args): return exlib_window_swig_py.std_vector_float___delitem__(self, *args)
    def __getitem__(self, *args): return exlib_window_swig_py.std_vector_float___getitem__(self, *args)
    def __setitem__(self, *args): return exlib_window_swig_py.std_vector_float___setitem__(self, *args)
    def append(self, *args): return exlib_window_swig_py.std_vector_float_append(self, *args)
    def empty(self): return exlib_window_swig_py.std_vector_float_empty(self)
    def size(self): return exlib_window_swig_py.std_vector_float_size(self)
    def clear(self): return exlib_window_swig_py.std_vector_float_clear(self)
    def swap(self, *args): return exlib_window_swig_py.std_vector_float_swap(self, *args)
    def get_allocator(self): return exlib_window_swig_py.std_vector_float_get_allocator(self)
    def begin(self): return exlib_window_swig_py.std_vector_float_begin(self)
    def end(self): return exlib_window_swig_py.std_vector_float_end(self)
    def rbegin(self): return exlib_window_swig_py.std_vector_float_rbegin(self)
    def rend(self): return exlib_window_swig_py.std_vector_float_rend(self)
    def pop_back(self): return exlib_window_swig_py.std_vector_float_pop_back(self)
    def erase(self, *args): return exlib_window_swig_py.std_vector_float_erase(self, *args)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_std_vector_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return exlib_window_swig_py.std_vector_float_push_back(self, *args)
    def front(self): return exlib_window_swig_py.std_vector_float_front(self)
    def back(self): return exlib_window_swig_py.std_vector_float_back(self)
    def assign(self, *args): return exlib_window_swig_py.std_vector_float_assign(self, *args)
    def resize(self, *args): return exlib_window_swig_py.std_vector_float_resize(self, *args)
    def insert(self, *args): return exlib_window_swig_py.std_vector_float_insert(self, *args)
    def reserve(self, *args): return exlib_window_swig_py.std_vector_float_reserve(self, *args)
    def capacity(self): return exlib_window_swig_py.std_vector_float_capacity(self)
    __swig_destroy__ = exlib_window_swig_py.delete_std_vector_float
    __del__ = lambda self : None;
std_vector_float_swigregister = exlib_window_swig_py.std_vector_float_swigregister
std_vector_float_swigregister(std_vector_float)

class std_vector_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return exlib_window_swig_py.std_vector_double_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return exlib_window_swig_py.std_vector_double___nonzero__(self)
    def __bool__(self): return exlib_window_swig_py.std_vector_double___bool__(self)
    def __len__(self): return exlib_window_swig_py.std_vector_double___len__(self)
    def pop(self): return exlib_window_swig_py.std_vector_double_pop(self)
    def __getslice__(self, *args): return exlib_window_swig_py.std_vector_double___getslice__(self, *args)
    def __setslice__(self, *args): return exlib_window_swig_py.std_vector_double___setslice__(self, *args)
    def __delslice__(self, *args): return exlib_window_swig_py.std_vector_double___delslice__(self, *args)
    def __delitem__(self, *args): return exlib_window_swig_py.std_vector_double___delitem__(self, *args)
    def __getitem__(self, *args): return exlib_window_swig_py.std_vector_double___getitem__(self, *args)
    def __setitem__(self, *args): return exlib_window_swig_py.std_vector_double___setitem__(self, *args)
    def append(self, *args): return exlib_window_swig_py.std_vector_double_append(self, *args)
    def empty(self): return exlib_window_swig_py.std_vector_double_empty(self)
    def size(self): return exlib_window_swig_py.std_vector_double_size(self)
    def clear(self): return exlib_window_swig_py.std_vector_double_clear(self)
    def swap(self, *args): return exlib_window_swig_py.std_vector_double_swap(self, *args)
    def get_allocator(self): return exlib_window_swig_py.std_vector_double_get_allocator(self)
    def begin(self): return exlib_window_swig_py.std_vector_double_begin(self)
    def end(self): return exlib_window_swig_py.std_vector_double_end(self)
    def rbegin(self): return exlib_window_swig_py.std_vector_double_rbegin(self)
    def rend(self): return exlib_window_swig_py.std_vector_double_rend(self)
    def pop_back(self): return exlib_window_swig_py.std_vector_double_pop_back(self)
    def erase(self, *args): return exlib_window_swig_py.std_vector_double_erase(self, *args)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_std_vector_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return exlib_window_swig_py.std_vector_double_push_back(self, *args)
    def front(self): return exlib_window_swig_py.std_vector_double_front(self)
    def back(self): return exlib_window_swig_py.std_vector_double_back(self)
    def assign(self, *args): return exlib_window_swig_py.std_vector_double_assign(self, *args)
    def resize(self, *args): return exlib_window_swig_py.std_vector_double_resize(self, *args)
    def insert(self, *args): return exlib_window_swig_py.std_vector_double_insert(self, *args)
    def reserve(self, *args): return exlib_window_swig_py.std_vector_double_reserve(self, *args)
    def capacity(self): return exlib_window_swig_py.std_vector_double_capacity(self)
    __swig_destroy__ = exlib_window_swig_py.delete_std_vector_double
    __del__ = lambda self : None;
std_vector_double_swigregister = exlib_window_swig_py.std_vector_double_swigregister
std_vector_double_swigregister(std_vector_double)


def get_cout():
  return exlib_window_swig_py.get_cout()
get_cout = exlib_window_swig_py.get_cout

def env_append_path(*args):
  return exlib_window_swig_py.env_append_path(*args)
env_append_path = exlib_window_swig_py.env_append_path

def sep():
  return exlib_window_swig_py.sep()
sep = exlib_window_swig_py.sep
class std_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_std_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_std_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def cast(self): return exlib_window_swig_py.std_string_cast(self)
std_string_swigregister = exlib_window_swig_py.std_string_swigregister
std_string_swigregister(std_string)

class printer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_printer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_printer(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(self, *args): return exlib_window_swig_py.printer_write(self, *args)
printer_swigregister = exlib_window_swig_py.printer_swigregister
printer_swigregister(printer)

class args(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_args
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_args(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return exlib_window_swig_py.args_add(self, *args)
    def remove(self, *args): return exlib_window_swig_py.args_remove(self, *args)
    def remove_first(self): return exlib_window_swig_py.args_remove_first(self)
args_swigregister = exlib_window_swig_py.args_swigregister
args_swigregister(args)

class guiv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
guiv_swigregister = exlib_window_swig_py.guiv_swigregister
guiv_swigregister(guiv)

class opener(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_opener
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_opener(*args)
        try: self.this.append(this)
        except: self.this = this
    def open(self, *args): return exlib_window_swig_py.opener_open(self, *args)
opener_swigregister = exlib_window_swig_py.opener_swigregister
opener_swigregister(opener)


def file_exists(*args):
  return exlib_window_swig_py.file_exists(*args)
file_exists = exlib_window_swig_py.file_exists

def file_write(*args):
  return exlib_window_swig_py.file_write(*args)
file_write = exlib_window_swig_py.file_write

def file_paper_format_extension(*args):
  return exlib_window_swig_py.file_paper_format_extension(*args)
file_paper_format_extension = exlib_window_swig_py.file_paper_format_extension
class histo_h1d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_histo_h1d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_histo_h1d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return exlib_window_swig_py.histo_h1d_fill(self, *args)
    def entries(self): return exlib_window_swig_py.histo_h1d_entries(self)
    def mean(self): return exlib_window_swig_py.histo_h1d_mean(self)
    def rms(self): return exlib_window_swig_py.histo_h1d_rms(self)
histo_h1d_swigregister = exlib_window_swig_py.histo_h1d_swigregister
histo_h1d_swigregister(histo_h1d)

class histo_h2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_histo_h2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_histo_h2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return exlib_window_swig_py.histo_h2d_fill(self, *args)
    def entries(self): return exlib_window_swig_py.histo_h2d_entries(self)
    def mean_x(self): return exlib_window_swig_py.histo_h2d_mean_x(self)
    def rms_x(self): return exlib_window_swig_py.histo_h2d_rms_x(self)
    def mean_y(self): return exlib_window_swig_py.histo_h2d_mean_y(self)
    def rms_y(self): return exlib_window_swig_py.histo_h2d_rms_y(self)
histo_h2d_swigregister = exlib_window_swig_py.histo_h2d_swigregister
histo_h2d_swigregister(histo_h2d)

class histo_p1d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_histo_p1d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_histo_p1d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return exlib_window_swig_py.histo_p1d_fill(self, *args)
    def entries(self): return exlib_window_swig_py.histo_p1d_entries(self)
    def mean(self): return exlib_window_swig_py.histo_p1d_mean(self)
    def rms(self): return exlib_window_swig_py.histo_p1d_rms(self)
histo_p1d_swigregister = exlib_window_swig_py.histo_p1d_swigregister
histo_p1d_swigregister(histo_p1d)

class histo_p2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_histo_p2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_histo_p2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return exlib_window_swig_py.histo_p2d_fill(self, *args)
    def entries(self): return exlib_window_swig_py.histo_p2d_entries(self)
    def mean_x(self): return exlib_window_swig_py.histo_p2d_mean_x(self)
    def rms_x(self): return exlib_window_swig_py.histo_p2d_rms_x(self)
    def mean_y(self): return exlib_window_swig_py.histo_p2d_mean_y(self)
    def rms_y(self): return exlib_window_swig_py.histo_p2d_rms_y(self)
histo_p2d_swigregister = exlib_window_swig_py.histo_p2d_swigregister
histo_p2d_swigregister(histo_p2d)

class histo_c2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_histo_c2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_histo_c2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return exlib_window_swig_py.histo_c2d_fill(self, *args)
    def entries(self): return exlib_window_swig_py.histo_c2d_entries(self)
    def lower_edge_x(self): return exlib_window_swig_py.histo_c2d_lower_edge_x(self)
    def upper_edge_x(self): return exlib_window_swig_py.histo_c2d_upper_edge_x(self)
    def lower_edge_y(self): return exlib_window_swig_py.histo_c2d_lower_edge_y(self)
    def upper_edge_y(self): return exlib_window_swig_py.histo_c2d_upper_edge_y(self)
    def mean_x(self): return exlib_window_swig_py.histo_c2d_mean_x(self)
    def rms_x(self): return exlib_window_swig_py.histo_c2d_rms_x(self)
    def mean_y(self): return exlib_window_swig_py.histo_c2d_mean_y(self)
    def rms_y(self): return exlib_window_swig_py.histo_c2d_rms_y(self)
histo_c2d_swigregister = exlib_window_swig_py.histo_c2d_swigregister
histo_c2d_swigregister(histo_c2d)

class histo_c3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_histo_c3d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_histo_c3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def fill(self, *args): return exlib_window_swig_py.histo_c3d_fill(self, *args)
    def entries(self): return exlib_window_swig_py.histo_c3d_entries(self)
    def lower_edge_x(self): return exlib_window_swig_py.histo_c3d_lower_edge_x(self)
    def upper_edge_x(self): return exlib_window_swig_py.histo_c3d_upper_edge_x(self)
    def lower_edge_y(self): return exlib_window_swig_py.histo_c3d_lower_edge_y(self)
    def upper_edge_y(self): return exlib_window_swig_py.histo_c3d_upper_edge_y(self)
    def lower_edge_z(self): return exlib_window_swig_py.histo_c3d_lower_edge_z(self)
    def upper_edge_z(self): return exlib_window_swig_py.histo_c3d_upper_edge_z(self)
    def mean_x(self): return exlib_window_swig_py.histo_c3d_mean_x(self)
    def rms_x(self): return exlib_window_swig_py.histo_c3d_rms_x(self)
    def mean_y(self): return exlib_window_swig_py.histo_c3d_mean_y(self)
    def rms_y(self): return exlib_window_swig_py.histo_c3d_rms_y(self)
    def mean_z(self): return exlib_window_swig_py.histo_c3d_mean_z(self)
    def rms_z(self): return exlib_window_swig_py.histo_c3d_rms_z(self)
histo_c3d_swigregister = exlib_window_swig_py.histo_c3d_swigregister
histo_c3d_swigregister(histo_c3d)

class rtausmeui(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rtausmeui
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rtausmeui(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_seed(self, *args): return exlib_window_swig_py.rtausmeui_set_seed(self, *args)
    def seed(self): return exlib_window_swig_py.rtausmeui_seed(self)
    def shoot(self): return exlib_window_swig_py.rtausmeui_shoot(self)
rtausmeui_swigregister = exlib_window_swig_py.rtausmeui_swigregister
rtausmeui_swigregister(rtausmeui)

class rtausmed(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rtausmed
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rtausmed(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_seed(self, *args): return exlib_window_swig_py.rtausmed_set_seed(self, *args)
    def seed(self): return exlib_window_swig_py.rtausmed_seed(self)
    def shoot(self): return exlib_window_swig_py.rtausmed_shoot(self)
rtausmed_swigregister = exlib_window_swig_py.rtausmed_swigregister
rtausmed_swigregister(rtausmed)

class rgaussd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rgaussd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rgaussd(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self): return exlib_window_swig_py.rgaussd_shoot(self)
rgaussd_swigregister = exlib_window_swig_py.rgaussd_swigregister
rgaussd_swigregister(rgaussd)

class rbwd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rbwd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rbwd(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self): return exlib_window_swig_py.rbwd_shoot(self)
rbwd_swigregister = exlib_window_swig_py.rbwd_swigregister
rbwd_swigregister(rbwd)

class rexpd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rexpd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rexpd(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self): return exlib_window_swig_py.rexpd_shoot(self)
rexpd_swigregister = exlib_window_swig_py.rexpd_swigregister
rexpd_swigregister(rexpd)

class rdir2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rdir2d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rdir2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self, *args): return exlib_window_swig_py.rdir2d_shoot(self, *args)
rdir2d_swigregister = exlib_window_swig_py.rdir2d_swigregister
rdir2d_swigregister(rdir2d)

class rdir3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rdir3d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rdir3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def shoot(self, *args): return exlib_window_swig_py.rdir3d_shoot(self, *args)
rdir3d_swigregister = exlib_window_swig_py.rdir3d_swigregister
rdir3d_swigregister(rdir3d)

class sg_style_colormap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_style_colormap
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_style_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
sg_style_colormap_swigregister = exlib_window_swig_py.sg_style_colormap_swigregister
sg_style_colormap_swigregister(sg_style_colormap)

class sg_style_default_colormap(sg_style_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_style_default_colormap
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_style_default_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
sg_style_default_colormap_swigregister = exlib_window_swig_py.sg_style_default_colormap_swigregister
sg_style_default_colormap_swigregister(sg_style_default_colormap)

class sg_style_ROOT_colormap(sg_style_colormap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_style_ROOT_colormap
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_style_ROOT_colormap(*args)
        try: self.this.append(this)
        except: self.this = this
sg_style_ROOT_colormap_swigregister = exlib_window_swig_py.sg_style_ROOT_colormap_swigregister
sg_style_ROOT_colormap_swigregister(sg_style_ROOT_colormap)

class xml_styles(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_xml_styles
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_xml_styles(*args)
        try: self.this.append(this)
        except: self.this = this
    def out(self): return exlib_window_swig_py.xml_styles_out(self)
    def add_colormap(self, *args): return exlib_window_swig_py.xml_styles_add_colormap(self, *args)
xml_styles_swigregister = exlib_window_swig_py.xml_styles_swigregister
xml_styles_swigregister(xml_styles)

class SOPI_color(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_color
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_color(*args)
        try: self.this.append(this)
        except: self.this = this
    def rchar(self): return exlib_window_swig_py.SOPI_color_rchar(self)
    def gchar(self): return exlib_window_swig_py.SOPI_color_gchar(self)
    def bchar(self): return exlib_window_swig_py.SOPI_color_bchar(self)
    def r(self): return exlib_window_swig_py.SOPI_color_r(self)
    def g(self): return exlib_window_swig_py.SOPI_color_g(self)
    def b(self): return exlib_window_swig_py.SOPI_color_b(self)
SOPI_color_swigregister = exlib_window_swig_py.SOPI_color_swigregister
SOPI_color_swigregister(SOPI_color)

class SOPI_cmap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    black = staticmethod(exlib_window_swig_py.SOPI_cmap_black)
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_cmap
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_cmap(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_color(self, *args): return exlib_window_swig_py.SOPI_cmap_get_color(self, *args)
    def size(self): return exlib_window_swig_py.SOPI_cmap_size(self)
SOPI_cmap_swigregister = exlib_window_swig_py.SOPI_cmap_swigregister
SOPI_cmap_swigregister(SOPI_cmap)

def SOPI_cmap_black():
  return exlib_window_swig_py.SOPI_cmap_black()
SOPI_cmap_black = exlib_window_swig_py.SOPI_cmap_black

class SOPI_grey32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_grey32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_grey32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_grey32_swigregister = exlib_window_swig_py.SOPI_grey32_swigregister
SOPI_grey32_swigregister(SOPI_grey32)

class SOPI_greyinv32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_greyinv32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_greyinv32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_greyinv32_swigregister = exlib_window_swig_py.SOPI_greyinv32_swigregister
SOPI_greyinv32_swigregister(SOPI_greyinv32)

class SOPI_grey128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_grey128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_grey128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_grey128_swigregister = exlib_window_swig_py.SOPI_grey128_swigregister
SOPI_grey128_swigregister(SOPI_grey128)

class SOPI_greyinv128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_greyinv128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_greyinv128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_greyinv128_swigregister = exlib_window_swig_py.SOPI_greyinv128_swigregister
SOPI_greyinv128_swigregister(SOPI_greyinv128)

class SOPI_grey256(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_grey256
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_grey256(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_grey256_swigregister = exlib_window_swig_py.SOPI_grey256_swigregister
SOPI_grey256_swigregister(SOPI_grey256)

class SOPI_col16(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_col16
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_col16(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_col16_swigregister = exlib_window_swig_py.SOPI_col16_swigregister
SOPI_col16_swigregister(SOPI_col16)

class SOPI_colrj32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_colrj32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_colrj32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colrj32_swigregister = exlib_window_swig_py.SOPI_colrj32_swigregister
SOPI_colrj32_swigregister(SOPI_colrj32)

class SOPI_colbr32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_colbr32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_colbr32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colbr32_swigregister = exlib_window_swig_py.SOPI_colbr32_swigregister
SOPI_colbr32_swigregister(SOPI_colbr32)

class SOPI_colrv32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_colrv32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_colrv32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colrv32_swigregister = exlib_window_swig_py.SOPI_colrv32_swigregister
SOPI_colrv32_swigregister(SOPI_colrv32)

class SOPI_colrj128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_colrj128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_colrj128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colrj128_swigregister = exlib_window_swig_py.SOPI_colrj128_swigregister
SOPI_colrj128_swigregister(SOPI_colrj128)

class SOPI_colbr128(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_colbr128
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_colbr128(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_colbr128_swigregister = exlib_window_swig_py.SOPI_colbr128_swigregister
SOPI_colbr128_swigregister(SOPI_colbr128)

class SOPI_red32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_red32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_red32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_red32_swigregister = exlib_window_swig_py.SOPI_red32_swigregister
SOPI_red32_swigregister(SOPI_red32)

class SOPI_green32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_green32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_green32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_green32_swigregister = exlib_window_swig_py.SOPI_green32_swigregister
SOPI_green32_swigregister(SOPI_green32)

class SOPI_blue32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_blue32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_blue32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_blue32_swigregister = exlib_window_swig_py.SOPI_blue32_swigregister
SOPI_blue32_swigregister(SOPI_blue32)

class SOPI_yellow32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_yellow32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_yellow32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_yellow32_swigregister = exlib_window_swig_py.SOPI_yellow32_swigregister
SOPI_yellow32_swigregister(SOPI_yellow32)

class SOPI_orange32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_orange32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_orange32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_orange32_swigregister = exlib_window_swig_py.SOPI_orange32_swigregister
SOPI_orange32_swigregister(SOPI_orange32)

class SOPI_cyan32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_cyan32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_cyan32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_cyan32_swigregister = exlib_window_swig_py.SOPI_cyan32_swigregister
SOPI_cyan32_swigregister(SOPI_cyan32)

class SOPI_violet32(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_violet32
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_violet32(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_violet32_swigregister = exlib_window_swig_py.SOPI_violet32_swigregister
SOPI_violet32_swigregister(SOPI_violet32)

class SOPI_col64(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_col64
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_col64(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_col64_swigregister = exlib_window_swig_py.SOPI_col64_swigregister
SOPI_col64_swigregister(SOPI_col64)

class SOPI_rgb216(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_rgb216
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_rgb216(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb216_swigregister = exlib_window_swig_py.SOPI_rgb216_swigregister
SOPI_rgb216_swigregister(SOPI_rgb216)

class SOPI_rgb512(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_rgb512
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_rgb512(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb512_swigregister = exlib_window_swig_py.SOPI_rgb512_swigregister
SOPI_rgb512_swigregister(SOPI_rgb512)

class SOPI_rgb4096(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_rgb4096
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_rgb4096(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb4096_swigregister = exlib_window_swig_py.SOPI_rgb4096_swigregister
SOPI_rgb4096_swigregister(SOPI_rgb4096)

class SOPI_rgb32768(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_rgb32768
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_rgb32768(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_rgb32768_swigregister = exlib_window_swig_py.SOPI_rgb32768_swigregister
SOPI_rgb32768_swigregister(SOPI_rgb32768)

class SOPI_midas_pastel(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_pastel
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_pastel(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_pastel_swigregister = exlib_window_swig_py.SOPI_midas_pastel_swigregister
SOPI_midas_pastel_swigregister(SOPI_midas_pastel)

class SOPI_midas_heat(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_heat
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_heat(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_heat_swigregister = exlib_window_swig_py.SOPI_midas_heat_swigregister
SOPI_midas_heat_swigregister(SOPI_midas_heat)

class SOPI_midas_rainbow3(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_rainbow3
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_rainbow3(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_rainbow3_swigregister = exlib_window_swig_py.SOPI_midas_rainbow3_swigregister
SOPI_midas_rainbow3_swigregister(SOPI_midas_rainbow3)

class SOPI_midas_bluered(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_bluered
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_bluered(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_bluered_swigregister = exlib_window_swig_py.SOPI_midas_bluered_swigregister
SOPI_midas_bluered_swigregister(SOPI_midas_bluered)

class SOPI_midas_bluewhite(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_bluewhite
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_bluewhite(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_bluewhite_swigregister = exlib_window_swig_py.SOPI_midas_bluewhite_swigregister
SOPI_midas_bluewhite_swigregister(SOPI_midas_bluewhite)

class SOPI_midas_stairs8(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_stairs8
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_stairs8(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_stairs8_swigregister = exlib_window_swig_py.SOPI_midas_stairs8_swigregister
SOPI_midas_stairs8_swigregister(SOPI_midas_stairs8)

class SOPI_midas_stairs9(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_stairs9
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_stairs9(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_stairs9_swigregister = exlib_window_swig_py.SOPI_midas_stairs9_swigregister
SOPI_midas_stairs9_swigregister(SOPI_midas_stairs9)

class SOPI_midas_staircase(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_staircase
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_staircase(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_staircase_swigregister = exlib_window_swig_py.SOPI_midas_staircase_swigregister
SOPI_midas_staircase_swigregister(SOPI_midas_staircase)

class SOPI_midas_color(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_color
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_color(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_color_swigregister = exlib_window_swig_py.SOPI_midas_color_swigregister
SOPI_midas_color_swigregister(SOPI_midas_color)

class SOPI_midas_manycol(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_manycol
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_manycol(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_manycol_swigregister = exlib_window_swig_py.SOPI_midas_manycol_swigregister
SOPI_midas_manycol_swigregister(SOPI_midas_manycol)

class SOPI_midas_idl14(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_idl14
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_idl14(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_idl14_swigregister = exlib_window_swig_py.SOPI_midas_idl14_swigregister
SOPI_midas_idl14_swigregister(SOPI_midas_idl14)

class SOPI_midas_idl15(SOPI_cmap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_SOPI_midas_idl15
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_SOPI_midas_idl15(*args)
        try: self.this.append(this)
        except: self.this = this
SOPI_midas_idl15_swigregister = exlib_window_swig_py.SOPI_midas_idl15_swigregister
SOPI_midas_idl15_swigregister(SOPI_midas_idl15)

class img_byte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_img_byte
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_img_byte(*args)
        try: self.this.append(this)
        except: self.this = this
    def transfer(self, *args): return exlib_window_swig_py.img_byte_transfer(self, *args)
    def clear(self): return exlib_window_swig_py.img_byte_clear(self)
    def copy(self, *args): return exlib_window_swig_py.img_byte_copy(self, *args)
    def make_empty(self, a_delete=True): return exlib_window_swig_py.img_byte_make_empty(self, a_delete)
    def is_empty(self): return exlib_window_swig_py.img_byte_is_empty(self)
    def equal(self, *args): return exlib_window_swig_py.img_byte_equal(self, *args)
    def width(self): return exlib_window_swig_py.img_byte_width(self)
    def height(self): return exlib_window_swig_py.img_byte_height(self)
    def bytes_per_pixel(self): return exlib_window_swig_py.img_byte_bytes_per_pixel(self)
    def bpp(self): return exlib_window_swig_py.img_byte_bpp(self)
    def owner(self): return exlib_window_swig_py.img_byte_owner(self)
    def size(self): return exlib_window_swig_py.img_byte_size(self)
img_byte_swigregister = exlib_window_swig_py.img_byte_swigregister
img_byte_swigregister(img_byte)

class lut_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_lut_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_lut_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args): return exlib_window_swig_py.lut_float_apply(self, *args)
    def mn(self): return exlib_window_swig_py.lut_float_mn(self)
    def mx(self): return exlib_window_swig_py.lut_float_mx(self)
    def coln(self): return exlib_window_swig_py.lut_float_coln(self)
lut_float_swigregister = exlib_window_swig_py.lut_float_swigregister
lut_float_swigregister(lut_float)

class lut_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_lut_double
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_lut_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args): return exlib_window_swig_py.lut_double_apply(self, *args)
    def mn(self): return exlib_window_swig_py.lut_double_mn(self)
    def mx(self): return exlib_window_swig_py.lut_double_mx(self)
    def coln(self): return exlib_window_swig_py.lut_double_coln(self)
lut_double_swigregister = exlib_window_swig_py.lut_double_swigregister
lut_double_swigregister(lut_double)


def fpi():
  return exlib_window_swig_py.fpi()
fpi = exlib_window_swig_py.fpi

def ftwo_pi():
  return exlib_window_swig_py.ftwo_pi()
ftwo_pi = exlib_window_swig_py.ftwo_pi

def fhalf_pi():
  return exlib_window_swig_py.fhalf_pi()
fhalf_pi = exlib_window_swig_py.fhalf_pi

def fdeg2rad():
  return exlib_window_swig_py.fdeg2rad()
fdeg2rad = exlib_window_swig_py.fdeg2rad

def frad2deg():
  return exlib_window_swig_py.frad2deg()
frad2deg = exlib_window_swig_py.frad2deg

def fround(*args):
  return exlib_window_swig_py.fround(*args)
fround = exlib_window_swig_py.fround

def fstep(*args):
  return exlib_window_swig_py.fstep(*args)
fstep = exlib_window_swig_py.fstep

def fcos(*args):
  return exlib_window_swig_py.fcos(*args)
fcos = exlib_window_swig_py.fcos

def fsin(*args):
  return exlib_window_swig_py.fsin(*args)
fsin = exlib_window_swig_py.fsin

def facos(*args):
  return exlib_window_swig_py.facos(*args)
facos = exlib_window_swig_py.facos

def fasin(*args):
  return exlib_window_swig_py.fasin(*args)
fasin = exlib_window_swig_py.fasin

def ftan(*args):
  return exlib_window_swig_py.ftan(*args)
ftan = exlib_window_swig_py.ftan

def fatan(*args):
  return exlib_window_swig_py.fatan(*args)
fatan = exlib_window_swig_py.fatan

def fatan2(*args):
  return exlib_window_swig_py.fatan2(*args)
fatan2 = exlib_window_swig_py.fatan2

def fsqrt(*args):
  return exlib_window_swig_py.fsqrt(*args)
fsqrt = exlib_window_swig_py.fsqrt

def fpow(*args):
  return exlib_window_swig_py.fpow(*args)
fpow = exlib_window_swig_py.fpow

def fexp(*args):
  return exlib_window_swig_py.fexp(*args)
fexp = exlib_window_swig_py.fexp

def flog(*args):
  return exlib_window_swig_py.flog(*args)
flog = exlib_window_swig_py.flog

def flog10(*args):
  return exlib_window_swig_py.flog10(*args)
flog10 = exlib_window_swig_py.flog10

def ffloor(*args):
  return exlib_window_swig_py.ffloor(*args)
ffloor = exlib_window_swig_py.ffloor

def fceil(*args):
  return exlib_window_swig_py.fceil(*args)
fceil = exlib_window_swig_py.fceil

def fcosh(*args):
  return exlib_window_swig_py.fcosh(*args)
fcosh = exlib_window_swig_py.fcosh

def fsinh(*args):
  return exlib_window_swig_py.fsinh(*args)
fsinh = exlib_window_swig_py.fsinh

def ffabs(*args):
  return exlib_window_swig_py.ffabs(*args)
ffabs = exlib_window_swig_py.ffabs

def ffabsc(*args):
  return exlib_window_swig_py.ffabsc(*args)
ffabsc = exlib_window_swig_py.ffabsc

def pi():
  return exlib_window_swig_py.pi()
pi = exlib_window_swig_py.pi

def two_pi():
  return exlib_window_swig_py.two_pi()
two_pi = exlib_window_swig_py.two_pi

def half_pi():
  return exlib_window_swig_py.half_pi()
half_pi = exlib_window_swig_py.half_pi

def deg2rad():
  return exlib_window_swig_py.deg2rad()
deg2rad = exlib_window_swig_py.deg2rad

def rad2deg():
  return exlib_window_swig_py.rad2deg()
rad2deg = exlib_window_swig_py.rad2deg
class colorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_colorf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_colorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def r(self): return exlib_window_swig_py.colorf_r(self)
    def g(self): return exlib_window_swig_py.colorf_g(self)
    def b(self): return exlib_window_swig_py.colorf_b(self)
    def a(self): return exlib_window_swig_py.colorf_a(self)
    def set_r(self, *args): return exlib_window_swig_py.colorf_set_r(self, *args)
    def set_g(self, *args): return exlib_window_swig_py.colorf_set_g(self, *args)
    def set_b(self, *args): return exlib_window_swig_py.colorf_set_b(self, *args)
    def set_a(self, *args): return exlib_window_swig_py.colorf_set_a(self, *args)
colorf_swigregister = exlib_window_swig_py.colorf_swigregister
colorf_swigregister(colorf)


def colorf_aquamarine():
  return exlib_window_swig_py.colorf_aquamarine()
colorf_aquamarine = exlib_window_swig_py.colorf_aquamarine

def colorf_mediumaquamarine():
  return exlib_window_swig_py.colorf_mediumaquamarine()
colorf_mediumaquamarine = exlib_window_swig_py.colorf_mediumaquamarine

def colorf_black():
  return exlib_window_swig_py.colorf_black()
colorf_black = exlib_window_swig_py.colorf_black

def colorf_blue():
  return exlib_window_swig_py.colorf_blue()
colorf_blue = exlib_window_swig_py.colorf_blue

def colorf_cadetblue():
  return exlib_window_swig_py.colorf_cadetblue()
colorf_cadetblue = exlib_window_swig_py.colorf_cadetblue

def colorf_cornflowerblue():
  return exlib_window_swig_py.colorf_cornflowerblue()
colorf_cornflowerblue = exlib_window_swig_py.colorf_cornflowerblue

def colorf_darkslateblue():
  return exlib_window_swig_py.colorf_darkslateblue()
colorf_darkslateblue = exlib_window_swig_py.colorf_darkslateblue

def colorf_lightblue():
  return exlib_window_swig_py.colorf_lightblue()
colorf_lightblue = exlib_window_swig_py.colorf_lightblue

def colorf_lightsteelblue():
  return exlib_window_swig_py.colorf_lightsteelblue()
colorf_lightsteelblue = exlib_window_swig_py.colorf_lightsteelblue

def colorf_mediumblue():
  return exlib_window_swig_py.colorf_mediumblue()
colorf_mediumblue = exlib_window_swig_py.colorf_mediumblue

def colorf_mediumslateblue():
  return exlib_window_swig_py.colorf_mediumslateblue()
colorf_mediumslateblue = exlib_window_swig_py.colorf_mediumslateblue

def colorf_midnightblue():
  return exlib_window_swig_py.colorf_midnightblue()
colorf_midnightblue = exlib_window_swig_py.colorf_midnightblue

def colorf_navyblue():
  return exlib_window_swig_py.colorf_navyblue()
colorf_navyblue = exlib_window_swig_py.colorf_navyblue

def colorf_navy():
  return exlib_window_swig_py.colorf_navy()
colorf_navy = exlib_window_swig_py.colorf_navy

def colorf_skyblue():
  return exlib_window_swig_py.colorf_skyblue()
colorf_skyblue = exlib_window_swig_py.colorf_skyblue

def colorf_slateblue():
  return exlib_window_swig_py.colorf_slateblue()
colorf_slateblue = exlib_window_swig_py.colorf_slateblue

def colorf_steelblue():
  return exlib_window_swig_py.colorf_steelblue()
colorf_steelblue = exlib_window_swig_py.colorf_steelblue

def colorf_coral():
  return exlib_window_swig_py.colorf_coral()
colorf_coral = exlib_window_swig_py.colorf_coral

def colorf_cyan():
  return exlib_window_swig_py.colorf_cyan()
colorf_cyan = exlib_window_swig_py.colorf_cyan

def colorf_firebrick():
  return exlib_window_swig_py.colorf_firebrick()
colorf_firebrick = exlib_window_swig_py.colorf_firebrick

def colorf_brown():
  return exlib_window_swig_py.colorf_brown()
colorf_brown = exlib_window_swig_py.colorf_brown

def colorf_gold():
  return exlib_window_swig_py.colorf_gold()
colorf_gold = exlib_window_swig_py.colorf_gold

def colorf_goldenrod():
  return exlib_window_swig_py.colorf_goldenrod()
colorf_goldenrod = exlib_window_swig_py.colorf_goldenrod

def colorf_green():
  return exlib_window_swig_py.colorf_green()
colorf_green = exlib_window_swig_py.colorf_green

def colorf_darkgreen():
  return exlib_window_swig_py.colorf_darkgreen()
colorf_darkgreen = exlib_window_swig_py.colorf_darkgreen

def colorf_darkolivegreen():
  return exlib_window_swig_py.colorf_darkolivegreen()
colorf_darkolivegreen = exlib_window_swig_py.colorf_darkolivegreen

def colorf_forestgreen():
  return exlib_window_swig_py.colorf_forestgreen()
colorf_forestgreen = exlib_window_swig_py.colorf_forestgreen

def colorf_limegreen():
  return exlib_window_swig_py.colorf_limegreen()
colorf_limegreen = exlib_window_swig_py.colorf_limegreen

def colorf_mediumseagreen():
  return exlib_window_swig_py.colorf_mediumseagreen()
colorf_mediumseagreen = exlib_window_swig_py.colorf_mediumseagreen

def colorf_mediumspringgreen():
  return exlib_window_swig_py.colorf_mediumspringgreen()
colorf_mediumspringgreen = exlib_window_swig_py.colorf_mediumspringgreen

def colorf_palegreen():
  return exlib_window_swig_py.colorf_palegreen()
colorf_palegreen = exlib_window_swig_py.colorf_palegreen

def colorf_seagreen():
  return exlib_window_swig_py.colorf_seagreen()
colorf_seagreen = exlib_window_swig_py.colorf_seagreen

def colorf_springgreen():
  return exlib_window_swig_py.colorf_springgreen()
colorf_springgreen = exlib_window_swig_py.colorf_springgreen

def colorf_yellowgreen():
  return exlib_window_swig_py.colorf_yellowgreen()
colorf_yellowgreen = exlib_window_swig_py.colorf_yellowgreen

def colorf_darkslategrey():
  return exlib_window_swig_py.colorf_darkslategrey()
colorf_darkslategrey = exlib_window_swig_py.colorf_darkslategrey

def colorf_dimgrey():
  return exlib_window_swig_py.colorf_dimgrey()
colorf_dimgrey = exlib_window_swig_py.colorf_dimgrey

def colorf_lightgrey():
  return exlib_window_swig_py.colorf_lightgrey()
colorf_lightgrey = exlib_window_swig_py.colorf_lightgrey

def colorf_grey():
  return exlib_window_swig_py.colorf_grey()
colorf_grey = exlib_window_swig_py.colorf_grey

def colorf_khaki():
  return exlib_window_swig_py.colorf_khaki()
colorf_khaki = exlib_window_swig_py.colorf_khaki

def colorf_magenta():
  return exlib_window_swig_py.colorf_magenta()
colorf_magenta = exlib_window_swig_py.colorf_magenta

def colorf_maroon():
  return exlib_window_swig_py.colorf_maroon()
colorf_maroon = exlib_window_swig_py.colorf_maroon

def colorf_orange():
  return exlib_window_swig_py.colorf_orange()
colorf_orange = exlib_window_swig_py.colorf_orange

def colorf_orchid():
  return exlib_window_swig_py.colorf_orchid()
colorf_orchid = exlib_window_swig_py.colorf_orchid

def colorf_darkorchid():
  return exlib_window_swig_py.colorf_darkorchid()
colorf_darkorchid = exlib_window_swig_py.colorf_darkorchid

def colorf_mediumorchid():
  return exlib_window_swig_py.colorf_mediumorchid()
colorf_mediumorchid = exlib_window_swig_py.colorf_mediumorchid

def colorf_pink():
  return exlib_window_swig_py.colorf_pink()
colorf_pink = exlib_window_swig_py.colorf_pink

def colorf_plum():
  return exlib_window_swig_py.colorf_plum()
colorf_plum = exlib_window_swig_py.colorf_plum

def colorf_red():
  return exlib_window_swig_py.colorf_red()
colorf_red = exlib_window_swig_py.colorf_red

def colorf_indianred():
  return exlib_window_swig_py.colorf_indianred()
colorf_indianred = exlib_window_swig_py.colorf_indianred

def colorf_mediumvioletred():
  return exlib_window_swig_py.colorf_mediumvioletred()
colorf_mediumvioletred = exlib_window_swig_py.colorf_mediumvioletred

def colorf_orangered():
  return exlib_window_swig_py.colorf_orangered()
colorf_orangered = exlib_window_swig_py.colorf_orangered

def colorf_violetred():
  return exlib_window_swig_py.colorf_violetred()
colorf_violetred = exlib_window_swig_py.colorf_violetred

def colorf_salmon():
  return exlib_window_swig_py.colorf_salmon()
colorf_salmon = exlib_window_swig_py.colorf_salmon

def colorf_sienna():
  return exlib_window_swig_py.colorf_sienna()
colorf_sienna = exlib_window_swig_py.colorf_sienna

def colorf_tan():
  return exlib_window_swig_py.colorf_tan()
colorf_tan = exlib_window_swig_py.colorf_tan

def colorf_thistle():
  return exlib_window_swig_py.colorf_thistle()
colorf_thistle = exlib_window_swig_py.colorf_thistle

def colorf_turquoise():
  return exlib_window_swig_py.colorf_turquoise()
colorf_turquoise = exlib_window_swig_py.colorf_turquoise

def colorf_darkturquoise():
  return exlib_window_swig_py.colorf_darkturquoise()
colorf_darkturquoise = exlib_window_swig_py.colorf_darkturquoise

def colorf_mediumturquoise():
  return exlib_window_swig_py.colorf_mediumturquoise()
colorf_mediumturquoise = exlib_window_swig_py.colorf_mediumturquoise

def colorf_violet():
  return exlib_window_swig_py.colorf_violet()
colorf_violet = exlib_window_swig_py.colorf_violet

def colorf_blueviolet():
  return exlib_window_swig_py.colorf_blueviolet()
colorf_blueviolet = exlib_window_swig_py.colorf_blueviolet

def colorf_wheat():
  return exlib_window_swig_py.colorf_wheat()
colorf_wheat = exlib_window_swig_py.colorf_wheat

def colorf_white():
  return exlib_window_swig_py.colorf_white()
colorf_white = exlib_window_swig_py.colorf_white

def colorf_yellow():
  return exlib_window_swig_py.colorf_yellow()
colorf_yellow = exlib_window_swig_py.colorf_yellow

def colorf_greenyellow():
  return exlib_window_swig_py.colorf_greenyellow()
colorf_greenyellow = exlib_window_swig_py.colorf_greenyellow
class vec2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_vec2f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self): return exlib_window_swig_py.vec2f_x(self)
    def y(self): return exlib_window_swig_py.vec2f_y(self)
    def set_value(self, *args): return exlib_window_swig_py.vec2f_set_value(self, *args)
    def length(self): return exlib_window_swig_py.vec2f_length(self)
    def normalize(self): return exlib_window_swig_py.vec2f_normalize(self)
vec2f_swigregister = exlib_window_swig_py.vec2f_swigregister
vec2f_swigregister(vec2f)

class vec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_vec3f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self): return exlib_window_swig_py.vec3f_x(self)
    def y(self): return exlib_window_swig_py.vec3f_y(self)
    def z(self): return exlib_window_swig_py.vec3f_z(self)
    def set_value(self, *args): return exlib_window_swig_py.vec3f_set_value(self, *args)
    def length(self): return exlib_window_swig_py.vec3f_length(self)
    def normalize(self): return exlib_window_swig_py.vec3f_normalize(self)
vec3f_swigregister = exlib_window_swig_py.vec3f_swigregister
vec3f_swigregister(vec3f)

class mat4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_mat4f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_mat4f(*args)
        try: self.this.append(this)
        except: self.this = this
mat4f_swigregister = exlib_window_swig_py.mat4f_swigregister
mat4f_swigregister(mat4f)

class rotf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rotf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rotf(*args)
        try: self.this.append(this)
        except: self.this = this
rotf_swigregister = exlib_window_swig_py.rotf_swigregister
rotf_swigregister(rotf)

class box3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_box3f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_box3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def make_empty(self): return exlib_window_swig_py.box3f_make_empty(self)
    def is_empty(self): return exlib_window_swig_py.box3f_is_empty(self)
    def extend_by(self, *args): return exlib_window_swig_py.box3f_extend_by(self, *args)
    def mn(self): return exlib_window_swig_py.box3f_mn(self)
    def mx(self): return exlib_window_swig_py.box3f_mx(self)
box3f_swigregister = exlib_window_swig_py.box3f_swigregister
box3f_swigregister(box3f)

class vec3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_vec3d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self): return exlib_window_swig_py.vec3d_x(self)
    def y(self): return exlib_window_swig_py.vec3d_y(self)
    def z(self): return exlib_window_swig_py.vec3d_z(self)
    def set_value(self, *args): return exlib_window_swig_py.vec3d_set_value(self, *args)
    def length(self): return exlib_window_swig_py.vec3d_length(self)
    def normalize(self): return exlib_window_swig_py.vec3d_normalize(self)
vec3d_swigregister = exlib_window_swig_py.vec3d_swigregister
vec3d_swigregister(vec3d)

class rotd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rotd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rotd(*args)
        try: self.this.append(this)
        except: self.this = this
rotd_swigregister = exlib_window_swig_py.rotd_swigregister
rotd_swigregister(rotd)

class box3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_box3d
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_box3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def make_empty(self): return exlib_window_swig_py.box3d_make_empty(self)
    def is_empty(self): return exlib_window_swig_py.box3d_is_empty(self)
    def extend_by(self, *args): return exlib_window_swig_py.box3d_extend_by(self, *args)
    def mn(self): return exlib_window_swig_py.box3d_mn(self)
    def mx(self): return exlib_window_swig_py.box3d_mx(self)
box3d_swigregister = exlib_window_swig_py.box3d_swigregister
box3d_swigregister(box3d)

class sf_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_string_value(self, *args)
sf_string_swigregister = exlib_window_swig_py.sf_string_swigregister
sf_string_swigregister(sf_string)

class sf_vec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_vec3f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_vec3f_value(self, *args)
sf_vec3f_swigregister = exlib_window_swig_py.sf_vec3f_swigregister
sf_vec3f_swigregister(sf_vec3f)

class sf_mat4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_mat4f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_mat4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_mat4f_value(self, *args)
sf_mat4f_swigregister = exlib_window_swig_py.sf_mat4f_swigregister
sf_mat4f_swigregister(sf_mat4f)

class sf_rotf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_rotf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_rotf(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_rotf_value(self, *args)
sf_rotf_swigregister = exlib_window_swig_py.sf_rotf_swigregister
sf_rotf_swigregister(sf_rotf)

class mf_string(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_mf_string
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_mf_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return exlib_window_swig_py.mf_string_size(self)
    def empty(self): return exlib_window_swig_py.mf_string_empty(self)
    def values(self): return exlib_window_swig_py.mf_string_values(self)
mf_string_swigregister = exlib_window_swig_py.mf_string_swigregister
mf_string_swigregister(mf_string)

class sf_bool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_bool
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_bool(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_bool_value(self, *args)
    def value_cp(self): return exlib_window_swig_py.sf_bool_value_cp(self)
sf_bool_swigregister = exlib_window_swig_py.sf_bool_swigregister
sf_bool_swigregister(sf_bool)

class sf_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_float_value(self, *args)
    def value_cp(self): return exlib_window_swig_py.sf_float_value_cp(self)
sf_float_swigregister = exlib_window_swig_py.sf_float_swigregister
sf_float_swigregister(sf_float)

class sf_vec_colorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_vec_colorf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_vec_colorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_vec_colorf_value(self, *args)
sf_vec_colorf_swigregister = exlib_window_swig_py.sf_vec_colorf_swigregister
sf_vec_colorf_swigregister(sf_vec_colorf)

class sf_img_byte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_img_byte(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_img_byte_value(self, *args)
sf_img_byte_swigregister = exlib_window_swig_py.sf_img_byte_swigregister
sf_img_byte_swigregister(sf_img_byte)

class sf_enum_font_modeling(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_font_modeling
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_font_modeling(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_font_modeling_value(self, *args)
sf_enum_font_modeling_swigregister = exlib_window_swig_py.sf_enum_font_modeling_swigregister
sf_enum_font_modeling_swigregister(sf_enum_font_modeling)

class sf_enum_winding_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_winding_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_winding_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_winding_type_value(self, *args)
sf_enum_winding_type_swigregister = exlib_window_swig_py.sf_enum_winding_type_swigregister
sf_enum_winding_type_swigregister(sf_enum_winding_type)

class sf_enum_marker_style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_marker_style
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_marker_style(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_marker_style_value(self, *args)
sf_enum_marker_style_swigregister = exlib_window_swig_py.sf_enum_marker_style_swigregister
sf_enum_marker_style_swigregister(sf_enum_marker_style)

class sf_enum_area_style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_area_style
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_area_style(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_area_style_value(self, *args)
sf_enum_area_style_swigregister = exlib_window_swig_py.sf_enum_area_style_swigregister
sf_enum_area_style_swigregister(sf_enum_area_style)

class sf_enum_painting_policy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_painting_policy
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_painting_policy(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_painting_policy_value(self, *args)
sf_enum_painting_policy_swigregister = exlib_window_swig_py.sf_enum_painting_policy_swigregister
sf_enum_painting_policy_swigregister(sf_enum_painting_policy)

class sf_enum_hatching_policy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_hatching_policy
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_hatching_policy(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_hatching_policy_value(self, *args)
sf_enum_hatching_policy_swigregister = exlib_window_swig_py.sf_enum_hatching_policy_swigregister
sf_enum_hatching_policy_swigregister(sf_enum_hatching_policy)

class sf_enum_projection_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_projection_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_projection_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_projection_type_value(self, *args)
sf_enum_projection_type_swigregister = exlib_window_swig_py.sf_enum_projection_type_swigregister
sf_enum_projection_type_swigregister(sf_enum_projection_type)

class sf_enum_hjust(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_hjust
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_hjust(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_hjust_value(self, *args)
sf_enum_hjust_swigregister = exlib_window_swig_py.sf_enum_hjust_swigregister
sf_enum_hjust_swigregister(sf_enum_hjust)

class sf_enum_vjust(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_vjust
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_vjust(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_vjust_value(self, *args)
sf_enum_vjust_swigregister = exlib_window_swig_py.sf_enum_vjust_swigregister
sf_enum_vjust_swigregister(sf_enum_vjust)

class sf_enum_draw_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_draw_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_draw_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_draw_type_value(self, *args)
sf_enum_draw_type_swigregister = exlib_window_swig_py.sf_enum_draw_type_swigregister
sf_enum_draw_type_swigregister(sf_enum_draw_type)

class sf_enum_shade_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_shade_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_shade_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_shade_type_value(self, *args)
sf_enum_shade_type_swigregister = exlib_window_swig_py.sf_enum_shade_type_swigregister
sf_enum_shade_type_swigregister(sf_enum_shade_type)

class mf_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_mf_float
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_mf_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return exlib_window_swig_py.mf_float_size(self)
    def empty(self): return exlib_window_swig_py.mf_float_empty(self)
    def values(self): return exlib_window_swig_py.mf_float_values(self)
mf_float_swigregister = exlib_window_swig_py.mf_float_swigregister
mf_float_swigregister(mf_float)

class mf_vec_vec2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_mf_vec_vec2f
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_mf_vec_vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return exlib_window_swig_py.mf_vec_vec2f_size(self)
    def empty(self): return exlib_window_swig_py.mf_vec_vec2f_empty(self)
    def values(self): return exlib_window_swig_py.mf_vec_vec2f_values(self)
mf_vec_vec2f_swigregister = exlib_window_swig_py.mf_vec_vec2f_swigregister
mf_vec_vec2f_swigregister(mf_vec_vec2f)

class mf_enum_unit_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_mf_enum_unit_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_mf_enum_unit_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return exlib_window_swig_py.mf_enum_unit_type_size(self)
    def empty(self): return exlib_window_swig_py.mf_enum_unit_type_empty(self)
    def values(self): return exlib_window_swig_py.mf_enum_unit_type_values(self)
mf_enum_unit_type_swigregister = exlib_window_swig_py.mf_enum_unit_type_swigregister
mf_enum_unit_type_swigregister(mf_enum_unit_type)

line_solid = exlib_window_swig_py.line_solid
line_dashed = exlib_window_swig_py.line_dashed
line_dotted = exlib_window_swig_py.line_dotted
line_dash_dotted = exlib_window_swig_py.line_dash_dotted
marker_dot = exlib_window_swig_py.marker_dot
marker_plus = exlib_window_swig_py.marker_plus
marker_asterisk = exlib_window_swig_py.marker_asterisk
marker_cross = exlib_window_swig_py.marker_cross
marker_star = exlib_window_swig_py.marker_star
marker_circle_line = exlib_window_swig_py.marker_circle_line
marker_circle_filled = exlib_window_swig_py.marker_circle_filled
marker_triangle_up_line = exlib_window_swig_py.marker_triangle_up_line
marker_triangle_up_filled = exlib_window_swig_py.marker_triangle_up_filled
marker_triangle_down_line = exlib_window_swig_py.marker_triangle_down_line
marker_triangle_down_filled = exlib_window_swig_py.marker_triangle_down_filled
marker_david_star_line = exlib_window_swig_py.marker_david_star_line
marker_david_star_filled = exlib_window_swig_py.marker_david_star_filled
marker_swiss_cross_line = exlib_window_swig_py.marker_swiss_cross_line
marker_swiss_cross_filled = exlib_window_swig_py.marker_swiss_cross_filled
marker_diamond_line = exlib_window_swig_py.marker_diamond_line
marker_diamond_filled = exlib_window_swig_py.marker_diamond_filled
marker_square_line = exlib_window_swig_py.marker_square_line
marker_square_filled = exlib_window_swig_py.marker_square_filled
marker_penta_star_line = exlib_window_swig_py.marker_penta_star_line
marker_penta_star_filled = exlib_window_swig_py.marker_penta_star_filled
marker_minus = exlib_window_swig_py.marker_minus
area_solid = exlib_window_swig_py.area_solid
area_hatched = exlib_window_swig_py.area_hatched
area_checker = exlib_window_swig_py.area_checker
area_edged = exlib_window_swig_py.area_edged
projection_none = exlib_window_swig_py.projection_none
projection_rz = exlib_window_swig_py.projection_rz
projection_phiz = exlib_window_swig_py.projection_phiz
projection_zr = exlib_window_swig_py.projection_zr
projection_zphi = exlib_window_swig_py.projection_zphi
painting_uniform = exlib_window_swig_py.painting_uniform
painting_by_value = exlib_window_swig_py.painting_by_value
painting_by_level = exlib_window_swig_py.painting_by_level
painting_grey_scale = exlib_window_swig_py.painting_grey_scale
painting_violet_to_red = exlib_window_swig_py.painting_violet_to_red
painting_grey_scale_inverse = exlib_window_swig_py.painting_grey_scale_inverse
hatching_none = exlib_window_swig_py.hatching_none
hatching_right = exlib_window_swig_py.hatching_right
hatching_left = exlib_window_swig_py.hatching_left
hatching_left_and_right = exlib_window_swig_py.hatching_left_and_right
left = exlib_window_swig_py.left
center = exlib_window_swig_py.center
right = exlib_window_swig_py.right
bottom = exlib_window_swig_py.bottom
middle = exlib_window_swig_py.middle
top = exlib_window_swig_py.top
latin = exlib_window_swig_py.latin
greek = exlib_window_swig_py.greek
special = exlib_window_swig_py.special
font_outline = exlib_window_swig_py.font_outline
font_filled = exlib_window_swig_py.font_filled
font_pixmap = exlib_window_swig_py.font_pixmap
arrow_up = exlib_window_swig_py.arrow_up
arrow_down = exlib_window_swig_py.arrow_down
arrow_left = exlib_window_swig_py.arrow_left
arrow_right = exlib_window_swig_py.arrow_right
winding_ccw = exlib_window_swig_py.winding_ccw
winding_cw = exlib_window_swig_py.winding_cw
move_rotate_right = exlib_window_swig_py.move_rotate_right
move_translate_right = exlib_window_swig_py.move_translate_right
move_rotate_up = exlib_window_swig_py.move_rotate_up
move_rotate_down = exlib_window_swig_py.move_rotate_down
move_rotate_left = exlib_window_swig_py.move_rotate_left
move_translate_left = exlib_window_swig_py.move_translate_left
move_up = exlib_window_swig_py.move_up
move_down = exlib_window_swig_py.move_down
move_forward = exlib_window_swig_py.move_forward
move_backward = exlib_window_swig_py.move_backward
move_zoom_in = exlib_window_swig_py.move_zoom_in
move_zoom_out = exlib_window_swig_py.move_zoom_out
move_rotate_around_focal_right = exlib_window_swig_py.move_rotate_around_focal_right
move_rotate_around_focal_left = exlib_window_swig_py.move_rotate_around_focal_left
move_rotate_around_focal_up = exlib_window_swig_py.move_rotate_around_focal_up
move_rotate_around_focal_down = exlib_window_swig_py.move_rotate_around_focal_down
move_zoom_in_out = exlib_window_swig_py.move_zoom_in_out
move_zoom_in_out_rot = exlib_window_swig_py.move_zoom_in_out_rot
move_curve = exlib_window_swig_py.move_curve
anim_left = exlib_window_swig_py.anim_left
anim_right = exlib_window_swig_py.anim_right
anim_up = exlib_window_swig_py.anim_up
anim_down = exlib_window_swig_py.anim_down
anim_mode_0 = exlib_window_swig_py.anim_mode_0
anim_mode_1 = exlib_window_swig_py.anim_mode_1
anim_mode_2 = exlib_window_swig_py.anim_mode_2
anim_mode_3 = exlib_window_swig_py.anim_mode_3
key_left = exlib_window_swig_py.key_left
key_right = exlib_window_swig_py.key_right
key_up = exlib_window_swig_py.key_up
key_down = exlib_window_swig_py.key_down
number_uint = exlib_window_swig_py.number_uint
number_int = exlib_window_swig_py.number_int
number_real = exlib_window_swig_py.number_real
number_ip = exlib_window_swig_py.number_ip
number_radec = exlib_window_swig_py.number_radec
camera_ortho = exlib_window_swig_py.camera_ortho
camera_perspective = exlib_window_swig_py.camera_perspective
gsto_memory = exlib_window_swig_py.gsto_memory
gsto_gl_vbo = exlib_window_swig_py.gsto_gl_vbo
gsto_gl_list = exlib_window_swig_py.gsto_gl_list
layout_text_under_image = exlib_window_swig_py.layout_text_under_image
layout_text_at_left_of_image = exlib_window_swig_py.layout_text_at_left_of_image
auto_lut_none = exlib_window_swig_py.auto_lut_none
auto_lut_min_max = exlib_window_swig_py.auto_lut_min_max
auto_lut_mean_rms = exlib_window_swig_py.auto_lut_mean_rms
draw_points = exlib_window_swig_py.draw_points
draw_lines = exlib_window_swig_py.draw_lines
draw_filled = exlib_window_swig_py.draw_filled
shade_flat = exlib_window_swig_py.shade_flat
shade_smooth = exlib_window_swig_py.shade_smooth

def font_arialbd_ttf():
  return exlib_window_swig_py.font_arialbd_ttf()
font_arialbd_ttf = exlib_window_swig_py.font_arialbd_ttf

def modeling_boxes():
  return exlib_window_swig_py.modeling_boxes()
modeling_boxes = exlib_window_swig_py.modeling_boxes

def modeling_wire_boxes():
  return exlib_window_swig_py.modeling_wire_boxes()
modeling_wire_boxes = exlib_window_swig_py.modeling_wire_boxes

def modeling_lines():
  return exlib_window_swig_py.modeling_lines()
modeling_lines = exlib_window_swig_py.modeling_lines

def modeling_segments():
  return exlib_window_swig_py.modeling_segments()
modeling_segments = exlib_window_swig_py.modeling_segments

def modeling_points():
  return exlib_window_swig_py.modeling_points()
modeling_points = exlib_window_swig_py.modeling_points

def modeling_top_lines():
  return exlib_window_swig_py.modeling_top_lines()
modeling_top_lines = exlib_window_swig_py.modeling_top_lines

def modeling_texts():
  return exlib_window_swig_py.modeling_texts()
modeling_texts = exlib_window_swig_py.modeling_texts

def modeling_curve():
  return exlib_window_swig_py.modeling_curve()
modeling_curve = exlib_window_swig_py.modeling_curve

def modeling_filled_curve():
  return exlib_window_swig_py.modeling_filled_curve()
modeling_filled_curve = exlib_window_swig_py.modeling_filled_curve

def modeling_bar_chart():
  return exlib_window_swig_py.modeling_bar_chart()
modeling_bar_chart = exlib_window_swig_py.modeling_bar_chart

def modeling_solid():
  return exlib_window_swig_py.modeling_solid()
modeling_solid = exlib_window_swig_py.modeling_solid

def modeling_wire_frame():
  return exlib_window_swig_py.modeling_wire_frame()
modeling_wire_frame = exlib_window_swig_py.modeling_wire_frame

def modeling_reduced_wire_frame():
  return exlib_window_swig_py.modeling_reduced_wire_frame()
modeling_reduced_wire_frame = exlib_window_swig_py.modeling_reduced_wire_frame

def modeling_polygon():
  return exlib_window_swig_py.modeling_polygon()
modeling_polygon = exlib_window_swig_py.modeling_polygon

def modeling_none():
  return exlib_window_swig_py.modeling_none()
modeling_none = exlib_window_swig_py.modeling_none

def modeling_I():
  return exlib_window_swig_py.modeling_I()
modeling_I = exlib_window_swig_py.modeling_I

def modeling_plus():
  return exlib_window_swig_py.modeling_plus()
modeling_plus = exlib_window_swig_py.modeling_plus

def modeling_markers():
  return exlib_window_swig_py.modeling_markers()
modeling_markers = exlib_window_swig_py.modeling_markers
class style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(exlib_window_swig_py.style_color_get, exlib_window_swig_py.style_color_set)
    highlight_color = _swig_property(exlib_window_swig_py.style_highlight_color_get, exlib_window_swig_py.style_highlight_color_set)
    back_color = _swig_property(exlib_window_swig_py.style_back_color_get, exlib_window_swig_py.style_back_color_set)
    line_width = _swig_property(exlib_window_swig_py.style_line_width_get, exlib_window_swig_py.style_line_width_set)
    marker_size = _swig_property(exlib_window_swig_py.style_marker_size_get, exlib_window_swig_py.style_marker_size_set)
    point_size = _swig_property(exlib_window_swig_py.style_point_size_get, exlib_window_swig_py.style_point_size_set)
    font_size = _swig_property(exlib_window_swig_py.style_font_size_get, exlib_window_swig_py.style_font_size_set)
    font_modeling = _swig_property(exlib_window_swig_py.style_font_modeling_get, exlib_window_swig_py.style_font_modeling_set)
    front_face = _swig_property(exlib_window_swig_py.style_front_face_get, exlib_window_swig_py.style_front_face_set)
    line_pattern = _swig_property(exlib_window_swig_py.style_line_pattern_get, exlib_window_swig_py.style_line_pattern_set)
    marker_style = _swig_property(exlib_window_swig_py.style_marker_style_get, exlib_window_swig_py.style_marker_style_set)
    area_style = _swig_property(exlib_window_swig_py.style_area_style_get, exlib_window_swig_py.style_area_style_set)
    modeling = _swig_property(exlib_window_swig_py.style_modeling_get, exlib_window_swig_py.style_modeling_set)
    light_model = _swig_property(exlib_window_swig_py.style_light_model_get, exlib_window_swig_py.style_light_model_set)
    tick_modeling = _swig_property(exlib_window_swig_py.style_tick_modeling_get, exlib_window_swig_py.style_tick_modeling_set)
    encoding = _swig_property(exlib_window_swig_py.style_encoding_get, exlib_window_swig_py.style_encoding_set)
    smoothing = _swig_property(exlib_window_swig_py.style_smoothing_get, exlib_window_swig_py.style_smoothing_set)
    hinting = _swig_property(exlib_window_swig_py.style_hinting_get, exlib_window_swig_py.style_hinting_set)
    cut = _swig_property(exlib_window_swig_py.style_cut_get, exlib_window_swig_py.style_cut_set)
    painting = _swig_property(exlib_window_swig_py.style_painting_get, exlib_window_swig_py.style_painting_set)
    hatching = _swig_property(exlib_window_swig_py.style_hatching_get, exlib_window_swig_py.style_hatching_set)
    projection = _swig_property(exlib_window_swig_py.style_projection_get, exlib_window_swig_py.style_projection_set)
    font = _swig_property(exlib_window_swig_py.style_font_get, exlib_window_swig_py.style_font_set)
    multi_node_limit = _swig_property(exlib_window_swig_py.style_multi_node_limit_get, exlib_window_swig_py.style_multi_node_limit_set)
    divisions = _swig_property(exlib_window_swig_py.style_divisions_get, exlib_window_swig_py.style_divisions_set)
    rotation_steps = _swig_property(exlib_window_swig_py.style_rotation_steps_get, exlib_window_swig_py.style_rotation_steps_set)
    spacing = _swig_property(exlib_window_swig_py.style_spacing_get, exlib_window_swig_py.style_spacing_set)
    angle = _swig_property(exlib_window_swig_py.style_angle_get, exlib_window_swig_py.style_angle_set)
    scale = _swig_property(exlib_window_swig_py.style_scale_get, exlib_window_swig_py.style_scale_set)
    offset = _swig_property(exlib_window_swig_py.style_offset_get, exlib_window_swig_py.style_offset_set)
    strip_width = _swig_property(exlib_window_swig_py.style_strip_width_get, exlib_window_swig_py.style_strip_width_set)
    visible = _swig_property(exlib_window_swig_py.style_visible_get, exlib_window_swig_py.style_visible_set)
    bar_offset = _swig_property(exlib_window_swig_py.style_bar_offset_get, exlib_window_swig_py.style_bar_offset_set)
    bar_width = _swig_property(exlib_window_swig_py.style_bar_width_get, exlib_window_swig_py.style_bar_width_set)
    editable = _swig_property(exlib_window_swig_py.style_editable_get, exlib_window_swig_py.style_editable_set)
    automated = _swig_property(exlib_window_swig_py.style_automated_get, exlib_window_swig_py.style_automated_set)
    options = _swig_property(exlib_window_swig_py.style_options_get, exlib_window_swig_py.style_options_set)
    color_mapping = _swig_property(exlib_window_swig_py.style_color_mapping_get, exlib_window_swig_py.style_color_mapping_set)
    enforced = _swig_property(exlib_window_swig_py.style_enforced_get, exlib_window_swig_py.style_enforced_set)
    translation = _swig_property(exlib_window_swig_py.style_translation_get, exlib_window_swig_py.style_translation_set)
    def __init__(self): 
        this = exlib_window_swig_py.new_style()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_style
    __del__ = lambda self : None;
style_swigregister = exlib_window_swig_py.style_swigregister
style_swigregister(style)

class text_style(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    visible = _swig_property(exlib_window_swig_py.text_style_visible_get, exlib_window_swig_py.text_style_visible_set)
    color = _swig_property(exlib_window_swig_py.text_style_color_get, exlib_window_swig_py.text_style_color_set)
    back_color = _swig_property(exlib_window_swig_py.text_style_back_color_get, exlib_window_swig_py.text_style_back_color_set)
    back_shadow = _swig_property(exlib_window_swig_py.text_style_back_shadow_get, exlib_window_swig_py.text_style_back_shadow_set)
    modeling = _swig_property(exlib_window_swig_py.text_style_modeling_get, exlib_window_swig_py.text_style_modeling_set)
    font = _swig_property(exlib_window_swig_py.text_style_font_get, exlib_window_swig_py.text_style_font_set)
    font_size = _swig_property(exlib_window_swig_py.text_style_font_size_get, exlib_window_swig_py.text_style_font_size_set)
    font_modeling = _swig_property(exlib_window_swig_py.text_style_font_modeling_get, exlib_window_swig_py.text_style_font_modeling_set)
    encoding = _swig_property(exlib_window_swig_py.text_style_encoding_get, exlib_window_swig_py.text_style_encoding_set)
    smoothing = _swig_property(exlib_window_swig_py.text_style_smoothing_get, exlib_window_swig_py.text_style_smoothing_set)
    hinting = _swig_property(exlib_window_swig_py.text_style_hinting_get, exlib_window_swig_py.text_style_hinting_set)
    hjust = _swig_property(exlib_window_swig_py.text_style_hjust_get, exlib_window_swig_py.text_style_hjust_set)
    vjust = _swig_property(exlib_window_swig_py.text_style_vjust_get, exlib_window_swig_py.text_style_vjust_set)
    scale = _swig_property(exlib_window_swig_py.text_style_scale_get, exlib_window_swig_py.text_style_scale_set)
    x_orientation = _swig_property(exlib_window_swig_py.text_style_x_orientation_get, exlib_window_swig_py.text_style_x_orientation_set)
    y_orientation = _swig_property(exlib_window_swig_py.text_style_y_orientation_get, exlib_window_swig_py.text_style_y_orientation_set)
    rotated = _swig_property(exlib_window_swig_py.text_style_rotated_get, exlib_window_swig_py.text_style_rotated_set)
    line_width = _swig_property(exlib_window_swig_py.text_style_line_width_get, exlib_window_swig_py.text_style_line_width_set)
    line_pattern = _swig_property(exlib_window_swig_py.text_style_line_pattern_get, exlib_window_swig_py.text_style_line_pattern_set)
    enforced = _swig_property(exlib_window_swig_py.text_style_enforced_get, exlib_window_swig_py.text_style_enforced_set)
    translation = _swig_property(exlib_window_swig_py.text_style_translation_get, exlib_window_swig_py.text_style_translation_set)
    front_face = _swig_property(exlib_window_swig_py.text_style_front_face_get, exlib_window_swig_py.text_style_front_face_set)
    options = _swig_property(exlib_window_swig_py.text_style_options_get, exlib_window_swig_py.text_style_options_set)
    def __init__(self): 
        this = exlib_window_swig_py.new_text_style()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_text_style
    __del__ = lambda self : None;
text_style_swigregister = exlib_window_swig_py.text_style_swigregister
text_style_swigregister(text_style)

class render_action(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
render_action_swigregister = exlib_window_swig_py.render_action_swigregister
render_action_swigregister(render_action)

class write_action(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
write_action_swigregister = exlib_window_swig_py.write_action_swigregister
write_action_swigregister(write_action)

class polyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_polyhedron
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_polyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    def Translate(self, *args): return exlib_window_swig_py.polyhedron_Translate(self, *args)
    def Transform(self, *args): return exlib_window_swig_py.polyhedron_Transform(self, *args)
    def add(self, *args): return exlib_window_swig_py.polyhedron_add(self, *args)
    def subtract(self, *args): return exlib_window_swig_py.polyhedron_subtract(self, *args)
    def intersect(self, *args): return exlib_window_swig_py.polyhedron_intersect(self, *args)
polyhedron_swigregister = exlib_window_swig_py.polyhedron_swigregister
polyhedron_swigregister(polyhedron)

class hep_polyhedron_tubs(polyhedron):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_hep_polyhedron_tubs
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_hep_polyhedron_tubs(*args)
        try: self.this.append(this)
        except: self.this = this
hep_polyhedron_tubs_swigregister = exlib_window_swig_py.hep_polyhedron_tubs_swigregister
hep_polyhedron_tubs_swigregister(hep_polyhedron_tubs)

class sf_polyhedron(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_polyhedron
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_polyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_polyhedron_value(self, *args)
sf_polyhedron_swigregister = exlib_window_swig_py.sf_polyhedron_swigregister
sf_polyhedron_swigregister(sf_polyhedron)

class sg_node(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_node_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_node
    __del__ = lambda self : None;
    def render(self, *args): return exlib_window_swig_py.sg_node_render(self, *args)
    def write(self, *args): return exlib_window_swig_py.sg_node_write(self, *args)
sg_node_swigregister = exlib_window_swig_py.sg_node_swigregister
sg_node_swigregister(sg_node)

class sg_group(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_group_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_group
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_group(*args)
        try: self.this.append(this)
        except: self.this = this
    def add(self, *args): return exlib_window_swig_py.sg_group_add(self, *args)
    def remove(self, *args): return exlib_window_swig_py.sg_group_remove(self, *args)
    def remove_index(self, *args): return exlib_window_swig_py.sg_group_remove_index(self, *args)
sg_group_swigregister = exlib_window_swig_py.sg_group_swigregister
sg_group_swigregister(sg_group)

class sg_separator(sg_group):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_separator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_separator(*args)
        try: self.this.append(this)
        except: self.this = this
sg_separator_swigregister = exlib_window_swig_py.sg_separator_swigregister
sg_separator_swigregister(sg_separator)

class sg_selection(sg_separator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_selection
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_selection(*args)
        try: self.this.append(this)
        except: self.this = this
sg_selection_swigregister = exlib_window_swig_py.sg_selection_swigregister
sg_selection_swigregister(sg_selection)

class sg_base_camera(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def near_height(self): return exlib_window_swig_py.sg_base_camera_near_height(self)
    def zoom(self, *args): return exlib_window_swig_py.sg_base_camera_zoom(self, *args)
    def copy(self): return exlib_window_swig_py.sg_base_camera_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_base_camera
    __del__ = lambda self : None;
    znear = _swig_property(exlib_window_swig_py.sg_base_camera_znear_get, exlib_window_swig_py.sg_base_camera_znear_set)
    zfar = _swig_property(exlib_window_swig_py.sg_base_camera_zfar_get, exlib_window_swig_py.sg_base_camera_zfar_set)
    position = _swig_property(exlib_window_swig_py.sg_base_camera_position_get, exlib_window_swig_py.sg_base_camera_position_set)
    orientation = _swig_property(exlib_window_swig_py.sg_base_camera_orientation_get, exlib_window_swig_py.sg_base_camera_orientation_set)
    dx = _swig_property(exlib_window_swig_py.sg_base_camera_dx_get, exlib_window_swig_py.sg_base_camera_dx_set)
    da = _swig_property(exlib_window_swig_py.sg_base_camera_da_get, exlib_window_swig_py.sg_base_camera_da_set)
    ds = _swig_property(exlib_window_swig_py.sg_base_camera_ds_get, exlib_window_swig_py.sg_base_camera_ds_set)
    focal = _swig_property(exlib_window_swig_py.sg_base_camera_focal_get, exlib_window_swig_py.sg_base_camera_focal_set)
sg_base_camera_swigregister = exlib_window_swig_py.sg_base_camera_swigregister
sg_base_camera_swigregister(sg_base_camera)

class sg_ortho(sg_base_camera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def near_height(self): return exlib_window_swig_py.sg_ortho_near_height(self)
    def zoom(self, *args): return exlib_window_swig_py.sg_ortho_zoom(self, *args)
    def copy(self): return exlib_window_swig_py.sg_ortho_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_ortho
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_ortho(*args)
        try: self.this.append(this)
        except: self.this = this
    height = _swig_property(exlib_window_swig_py.sg_ortho_height_get, exlib_window_swig_py.sg_ortho_height_set)
sg_ortho_swigregister = exlib_window_swig_py.sg_ortho_swigregister
sg_ortho_swigregister(sg_ortho)


def sg_cast_ortho(*args):
  return exlib_window_swig_py.sg_cast_ortho(*args)
sg_cast_ortho = exlib_window_swig_py.sg_cast_ortho
class sg_perspective(sg_base_camera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def near_height(self): return exlib_window_swig_py.sg_perspective_near_height(self)
    def zoom(self, *args): return exlib_window_swig_py.sg_perspective_zoom(self, *args)
    def copy(self): return exlib_window_swig_py.sg_perspective_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_perspective
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_perspective(*args)
        try: self.this.append(this)
        except: self.this = this
    height_angle = _swig_property(exlib_window_swig_py.sg_perspective_height_angle_get, exlib_window_swig_py.sg_perspective_height_angle_set)
sg_perspective_swigregister = exlib_window_swig_py.sg_perspective_swigregister
sg_perspective_swigregister(sg_perspective)


def sg_cast_perspective(*args):
  return exlib_window_swig_py.sg_cast_perspective(*args)
sg_cast_perspective = exlib_window_swig_py.sg_cast_perspective
class sg_frustum(sg_base_camera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def near_height(self): return exlib_window_swig_py.sg_frustum_near_height(self)
    def zoom(self, *args): return exlib_window_swig_py.sg_frustum_zoom(self, *args)
    def copy(self): return exlib_window_swig_py.sg_frustum_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_frustum
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_frustum(*args)
        try: self.this.append(this)
        except: self.this = this
    left = _swig_property(exlib_window_swig_py.sg_frustum_left_get, exlib_window_swig_py.sg_frustum_left_set)
    right = _swig_property(exlib_window_swig_py.sg_frustum_right_get, exlib_window_swig_py.sg_frustum_right_set)
    bottom = _swig_property(exlib_window_swig_py.sg_frustum_bottom_get, exlib_window_swig_py.sg_frustum_bottom_set)
    top = _swig_property(exlib_window_swig_py.sg_frustum_top_get, exlib_window_swig_py.sg_frustum_top_set)
sg_frustum_swigregister = exlib_window_swig_py.sg_frustum_swigregister
sg_frustum_swigregister(sg_frustum)


def sg_cast_frustum(*args):
  return exlib_window_swig_py.sg_cast_frustum(*args)
sg_cast_frustum = exlib_window_swig_py.sg_cast_frustum
class sg_lrbt(sg_base_camera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def near_height(self): return exlib_window_swig_py.sg_lrbt_near_height(self)
    def zoom(self, *args): return exlib_window_swig_py.sg_lrbt_zoom(self, *args)
    def copy(self): return exlib_window_swig_py.sg_lrbt_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_lrbt
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_lrbt(*args)
        try: self.this.append(this)
        except: self.this = this
    left = _swig_property(exlib_window_swig_py.sg_lrbt_left_get, exlib_window_swig_py.sg_lrbt_left_set)
    right = _swig_property(exlib_window_swig_py.sg_lrbt_right_get, exlib_window_swig_py.sg_lrbt_right_set)
    bottom = _swig_property(exlib_window_swig_py.sg_lrbt_bottom_get, exlib_window_swig_py.sg_lrbt_bottom_set)
    top = _swig_property(exlib_window_swig_py.sg_lrbt_top_get, exlib_window_swig_py.sg_lrbt_top_set)
sg_lrbt_swigregister = exlib_window_swig_py.sg_lrbt_swigregister
sg_lrbt_swigregister(sg_lrbt)


def sg_cast_lrbt(*args):
  return exlib_window_swig_py.sg_cast_lrbt(*args)
sg_cast_lrbt = exlib_window_swig_py.sg_cast_lrbt
class sg_rgba(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_rgba_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_rgba
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_rgba(*args)
        try: self.this.append(this)
        except: self.this = this
    color = _swig_property(exlib_window_swig_py.sg_rgba_color_get, exlib_window_swig_py.sg_rgba_color_set)
sg_rgba_swigregister = exlib_window_swig_py.sg_rgba_swigregister
sg_rgba_swigregister(sg_rgba)

class sg_base_tex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_base_tex
    __del__ = lambda self : None;
    intersect_down = exlib_window_swig_py.sg_base_tex_intersect_down
    intersect_move = exlib_window_swig_py.sg_base_tex_intersect_move
    intersect_up = exlib_window_swig_py.sg_base_tex_intersect_up
    def intersect_value(self, *args): return exlib_window_swig_py.sg_base_tex_intersect_value(self, *args)
    img = _swig_property(exlib_window_swig_py.sg_base_tex_img_get, exlib_window_swig_py.sg_base_tex_img_set)
    back_color = _swig_property(exlib_window_swig_py.sg_base_tex_back_color_get, exlib_window_swig_py.sg_base_tex_back_color_set)
    expand = _swig_property(exlib_window_swig_py.sg_base_tex_expand_get, exlib_window_swig_py.sg_base_tex_expand_set)
    limit = _swig_property(exlib_window_swig_py.sg_base_tex_limit_get, exlib_window_swig_py.sg_base_tex_limit_set)
    nearest = _swig_property(exlib_window_swig_py.sg_base_tex_nearest_get, exlib_window_swig_py.sg_base_tex_nearest_set)
sg_base_tex_swigregister = exlib_window_swig_py.sg_base_tex_swigregister
sg_base_tex_swigregister(sg_base_tex)

class sg_tex_rect(sg_base_tex,sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def intersect_value(self, *args): return exlib_window_swig_py.sg_tex_rect_intersect_value(self, *args)
    def copy(self): return exlib_window_swig_py.sg_tex_rect_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_tex_rect
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_tex_rect(*args)
        try: self.this.append(this)
        except: self.this = this
sg_tex_rect_swigregister = exlib_window_swig_py.sg_tex_rect_swigregister
sg_tex_rect_swigregister(sg_tex_rect)

class sg_torche(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_torche_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_torche
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_torche(*args)
        try: self.this.append(this)
        except: self.this = this
    color = _swig_property(exlib_window_swig_py.sg_torche_color_get, exlib_window_swig_py.sg_torche_color_set)
    direction = _swig_property(exlib_window_swig_py.sg_torche_direction_get, exlib_window_swig_py.sg_torche_direction_set)
    on = _swig_property(exlib_window_swig_py.sg_torche_on_get, exlib_window_swig_py.sg_torche_on_set)
sg_torche_swigregister = exlib_window_swig_py.sg_torche_swigregister
sg_torche_swigregister(sg_torche)

class sg_head_light(sg_torche):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_head_light_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_head_light
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_head_light(*args)
        try: self.this.append(this)
        except: self.this = this
sg_head_light_swigregister = exlib_window_swig_py.sg_head_light_swigregister
sg_head_light_swigregister(sg_head_light)

class sg_blend(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_blend_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_blend
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_blend(*args)
        try: self.this.append(this)
        except: self.this = this
    on = _swig_property(exlib_window_swig_py.sg_blend_on_get, exlib_window_swig_py.sg_blend_on_set)
sg_blend_swigregister = exlib_window_swig_py.sg_blend_swigregister
sg_blend_swigregister(sg_blend)

class sg_matrix(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_matrix_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_matrix
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    mtx = _swig_property(exlib_window_swig_py.sg_matrix_mtx_get, exlib_window_swig_py.sg_matrix_mtx_set)
    def set_identity(self): return exlib_window_swig_py.sg_matrix_set_identity(self)
    def set_translate(self, *args): return exlib_window_swig_py.sg_matrix_set_translate(self, *args)
    def set_scale(self, *args): return exlib_window_swig_py.sg_matrix_set_scale(self, *args)
    def set_rotate(self, *args): return exlib_window_swig_py.sg_matrix_set_rotate(self, *args)
    def mul_mtx(self, *args): return exlib_window_swig_py.sg_matrix_mul_mtx(self, *args)
    def mul_translate(self, *args): return exlib_window_swig_py.sg_matrix_mul_translate(self, *args)
    def mul_scale(self, *args): return exlib_window_swig_py.sg_matrix_mul_scale(self, *args)
    def left_mul_rotate(self, *args): return exlib_window_swig_py.sg_matrix_left_mul_rotate(self, *args)
    def left_mul_scale(self, *args): return exlib_window_swig_py.sg_matrix_left_mul_scale(self, *args)
    def left_mul_translate(self, *args): return exlib_window_swig_py.sg_matrix_left_mul_translate(self, *args)
    def mul_rotate(self, *args): return exlib_window_swig_py.sg_matrix_mul_rotate(self, *args)
sg_matrix_swigregister = exlib_window_swig_py.sg_matrix_swigregister
sg_matrix_swigregister(sg_matrix)

class sg_polyhedron(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_polyhedron_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_polyhedron
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_polyhedron(*args)
        try: self.this.append(this)
        except: self.this = this
    ph = _swig_property(exlib_window_swig_py.sg_polyhedron_ph_get, exlib_window_swig_py.sg_polyhedron_ph_set)
    solid = _swig_property(exlib_window_swig_py.sg_polyhedron_solid_get, exlib_window_swig_py.sg_polyhedron_solid_set)
    reduced_wire_frame = _swig_property(exlib_window_swig_py.sg_polyhedron_reduced_wire_frame_get, exlib_window_swig_py.sg_polyhedron_reduced_wire_frame_set)
    enforce_edges = _swig_property(exlib_window_swig_py.sg_polyhedron_enforce_edges_get, exlib_window_swig_py.sg_polyhedron_enforce_edges_set)
sg_polyhedron_swigregister = exlib_window_swig_py.sg_polyhedron_swigregister
sg_polyhedron_swigregister(sg_polyhedron)

class sg_cone_hat(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_cone_hat_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_cone_hat
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_cone_hat(*args)
        try: self.this.append(this)
        except: self.this = this
    height = _swig_property(exlib_window_swig_py.sg_cone_hat_height_get, exlib_window_swig_py.sg_cone_hat_height_set)
    rmin = _swig_property(exlib_window_swig_py.sg_cone_hat_rmin_get, exlib_window_swig_py.sg_cone_hat_rmin_set)
    rmax = _swig_property(exlib_window_swig_py.sg_cone_hat_rmax_get, exlib_window_swig_py.sg_cone_hat_rmax_set)
    angle = _swig_property(exlib_window_swig_py.sg_cone_hat_angle_get, exlib_window_swig_py.sg_cone_hat_angle_set)
    steps = _swig_property(exlib_window_swig_py.sg_cone_hat_steps_get, exlib_window_swig_py.sg_cone_hat_steps_set)
sg_cone_hat_swigregister = exlib_window_swig_py.sg_cone_hat_swigregister
sg_cone_hat_swigregister(sg_cone_hat)

class sg_cube(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_cube_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_cube
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_cube(*args)
        try: self.this.append(this)
        except: self.this = this
    width = _swig_property(exlib_window_swig_py.sg_cube_width_get, exlib_window_swig_py.sg_cube_width_set)
    height = _swig_property(exlib_window_swig_py.sg_cube_height_get, exlib_window_swig_py.sg_cube_height_set)
    depth = _swig_property(exlib_window_swig_py.sg_cube_depth_get, exlib_window_swig_py.sg_cube_depth_set)
sg_cube_swigregister = exlib_window_swig_py.sg_cube_swigregister
sg_cube_swigregister(sg_cube)

class sg_sphere(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_sphere_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_sphere
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    radius = _swig_property(exlib_window_swig_py.sg_sphere_radius_get, exlib_window_swig_py.sg_sphere_radius_set)
    slices = _swig_property(exlib_window_swig_py.sg_sphere_slices_get, exlib_window_swig_py.sg_sphere_slices_set)
    stacks = _swig_property(exlib_window_swig_py.sg_sphere_stacks_get, exlib_window_swig_py.sg_sphere_stacks_set)
sg_sphere_swigregister = exlib_window_swig_py.sg_sphere_swigregister
sg_sphere_swigregister(sg_sphere)

class sg_draw_style(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_draw_style_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_draw_style
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_draw_style(*args)
        try: self.this.append(this)
        except: self.this = this
    style = _swig_property(exlib_window_swig_py.sg_draw_style_style_get, exlib_window_swig_py.sg_draw_style_style_set)
    line_width = _swig_property(exlib_window_swig_py.sg_draw_style_line_width_get, exlib_window_swig_py.sg_draw_style_line_width_set)
    line_pattern = _swig_property(exlib_window_swig_py.sg_draw_style_line_pattern_get, exlib_window_swig_py.sg_draw_style_line_pattern_set)
    point_size = _swig_property(exlib_window_swig_py.sg_draw_style_point_size_get, exlib_window_swig_py.sg_draw_style_point_size_set)
    cull_face = _swig_property(exlib_window_swig_py.sg_draw_style_cull_face_get, exlib_window_swig_py.sg_draw_style_cull_face_set)
    winding_ccw = _swig_property(exlib_window_swig_py.sg_draw_style_winding_ccw_get, exlib_window_swig_py.sg_draw_style_winding_ccw_set)
sg_draw_style_swigregister = exlib_window_swig_py.sg_draw_style_swigregister
sg_draw_style_swigregister(sg_draw_style)

class sg_shade_model(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_shade_model_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_shade_model
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_shade_model(*args)
        try: self.this.append(this)
        except: self.this = this
    model = _swig_property(exlib_window_swig_py.sg_shade_model_model_get, exlib_window_swig_py.sg_shade_model_model_set)
sg_shade_model_swigregister = exlib_window_swig_py.sg_shade_model_swigregister
sg_shade_model_swigregister(sg_shade_model)


def points():
  return exlib_window_swig_py.points()
points = exlib_window_swig_py.points

def lines():
  return exlib_window_swig_py.lines()
lines = exlib_window_swig_py.lines

def line_loop():
  return exlib_window_swig_py.line_loop()
line_loop = exlib_window_swig_py.line_loop

def line_strip():
  return exlib_window_swig_py.line_strip()
line_strip = exlib_window_swig_py.line_strip

def triangles():
  return exlib_window_swig_py.triangles()
triangles = exlib_window_swig_py.triangles

def triangle_strip():
  return exlib_window_swig_py.triangle_strip()
triangle_strip = exlib_window_swig_py.triangle_strip

def triangle_fan():
  return exlib_window_swig_py.triangle_fan()
triangle_fan = exlib_window_swig_py.triangle_fan

def is_mode(*args):
  return exlib_window_swig_py.is_mode(*args)
is_mode = exlib_window_swig_py.is_mode

def is_line(*args):
  return exlib_window_swig_py.is_line(*args)
is_line = exlib_window_swig_py.is_line
class sf_mode_t(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_mode_t
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_mode_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_mode_t_value(self, *args)
    def value_cp(self): return exlib_window_swig_py.sf_mode_t_value_cp(self)
sf_mode_t_swigregister = exlib_window_swig_py.sf_mode_t_swigregister
sf_mode_t_swigregister(sf_mode_t)

class sg_vertices(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_vertices_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_vertices
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_vertices(*args)
        try: self.this.append(this)
        except: self.this = this
    mode = _swig_property(exlib_window_swig_py.sg_vertices_mode_get, exlib_window_swig_py.sg_vertices_mode_set)
    xyzs = _swig_property(exlib_window_swig_py.sg_vertices_xyzs_get, exlib_window_swig_py.sg_vertices_xyzs_set)
    def add(self, *args): return exlib_window_swig_py.sg_vertices_add(self, *args)
    def number(self): return exlib_window_swig_py.sg_vertices_number(self)
    def clear(self): return exlib_window_swig_py.sg_vertices_clear(self)
    def add_dashed_line(self, *args): return exlib_window_swig_py.sg_vertices_add_dashed_line(self, *args)
    def center(self): return exlib_window_swig_py.sg_vertices_center(self)
sg_vertices_swigregister = exlib_window_swig_py.sg_vertices_swigregister
sg_vertices_swigregister(sg_vertices)

class sg_atb_vertices(sg_vertices):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_atb_vertices_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_atb_vertices
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_atb_vertices(*args)
        try: self.this.append(this)
        except: self.this = this
    rgbas = _swig_property(exlib_window_swig_py.sg_atb_vertices_rgbas_get, exlib_window_swig_py.sg_atb_vertices_rgbas_set)
    nms = _swig_property(exlib_window_swig_py.sg_atb_vertices_nms_get, exlib_window_swig_py.sg_atb_vertices_nms_set)
    do_back = _swig_property(exlib_window_swig_py.sg_atb_vertices_do_back_get, exlib_window_swig_py.sg_atb_vertices_do_back_set)
    epsilon = _swig_property(exlib_window_swig_py.sg_atb_vertices_epsilon_get, exlib_window_swig_py.sg_atb_vertices_epsilon_set)
    draw_edges = _swig_property(exlib_window_swig_py.sg_atb_vertices_draw_edges_get, exlib_window_swig_py.sg_atb_vertices_draw_edges_set)
    def add_pos_color(self, *args): return exlib_window_swig_py.sg_atb_vertices_add_pos_color(self, *args)
    def add_rgba(self, *args): return exlib_window_swig_py.sg_atb_vertices_add_rgba(self, *args)
    def add_color(self, *args): return exlib_window_swig_py.sg_atb_vertices_add_color(self, *args)
    def add_normal(self, *args): return exlib_window_swig_py.sg_atb_vertices_add_normal(self, *args)
    def add_dashed_line_rgba(self, *args): return exlib_window_swig_py.sg_atb_vertices_add_dashed_line_rgba(self, *args)
    def clear(self): return exlib_window_swig_py.sg_atb_vertices_clear(self)
sg_atb_vertices_swigregister = exlib_window_swig_py.sg_atb_vertices_swigregister
sg_atb_vertices_swigregister(sg_atb_vertices)

class sg_colored_sized_points(sg_vertices):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_colored_sized_points_copy(self)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_colored_sized_points
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_colored_sized_points(*args)
        try: self.this.append(this)
        except: self.this = this
    rgbas = _swig_property(exlib_window_swig_py.sg_colored_sized_points_rgbas_get, exlib_window_swig_py.sg_colored_sized_points_rgbas_set)
    sizes = _swig_property(exlib_window_swig_py.sg_colored_sized_points_sizes_get, exlib_window_swig_py.sg_colored_sized_points_sizes_set)
    def add(self, *args): return exlib_window_swig_py.sg_colored_sized_points_add(self, *args)
    def clear(self): return exlib_window_swig_py.sg_colored_sized_points_clear(self)
sg_colored_sized_points_swigregister = exlib_window_swig_py.sg_colored_sized_points_swigregister
sg_colored_sized_points_swigregister(sg_colored_sized_points)

class base_freetype(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_base_freetype
    __del__ = lambda self : None;
base_freetype_swigregister = exlib_window_swig_py.base_freetype_swigregister
base_freetype_swigregister(base_freetype)

class plottable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
plottable_swigregister = exlib_window_swig_py.plottable_swigregister
plottable_swigregister(plottable)

class h1d2plot(plottable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_h1d2plot
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_h1d2plot(*args)
        try: self.this.append(this)
        except: self.this = this
h1d2plot_swigregister = exlib_window_swig_py.h1d2plot_swigregister
h1d2plot_swigregister(h1d2plot)

class h1d2plot_cp(plottable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_h1d2plot_cp
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_h1d2plot_cp(*args)
        try: self.this.append(this)
        except: self.this = this
h1d2plot_cp_swigregister = exlib_window_swig_py.h1d2plot_cp_swigregister
h1d2plot_cp_swigregister(h1d2plot_cp)

class sf_enum_shape_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_shape_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_shape_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_shape_type_value(self, *args)
sf_enum_shape_type_swigregister = exlib_window_swig_py.sf_enum_shape_type_swigregister
sf_enum_shape_type_swigregister(sf_enum_shape_type)

class sf_enum_colormap_axis_labeling_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sf_enum_colormap_axis_labeling_type
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sf_enum_colormap_axis_labeling_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self, *args): return exlib_window_swig_py.sf_enum_colormap_axis_labeling_type_value(self, *args)
sf_enum_colormap_axis_labeling_type_swigregister = exlib_window_swig_py.sf_enum_colormap_axis_labeling_type_swigregister
sf_enum_colormap_axis_labeling_type_swigregister(sf_enum_colormap_axis_labeling_type)

class sg_plotter(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_plotter_copy(self)
    width = _swig_property(exlib_window_swig_py.sg_plotter_width_get, exlib_window_swig_py.sg_plotter_width_set)
    height = _swig_property(exlib_window_swig_py.sg_plotter_height_get, exlib_window_swig_py.sg_plotter_height_set)
    left_margin = _swig_property(exlib_window_swig_py.sg_plotter_left_margin_get, exlib_window_swig_py.sg_plotter_left_margin_set)
    right_margin = _swig_property(exlib_window_swig_py.sg_plotter_right_margin_get, exlib_window_swig_py.sg_plotter_right_margin_set)
    bottom_margin = _swig_property(exlib_window_swig_py.sg_plotter_bottom_margin_get, exlib_window_swig_py.sg_plotter_bottom_margin_set)
    top_margin = _swig_property(exlib_window_swig_py.sg_plotter_top_margin_get, exlib_window_swig_py.sg_plotter_top_margin_set)
    depth = _swig_property(exlib_window_swig_py.sg_plotter_depth_get, exlib_window_swig_py.sg_plotter_depth_set)
    down_margin = _swig_property(exlib_window_swig_py.sg_plotter_down_margin_get, exlib_window_swig_py.sg_plotter_down_margin_set)
    up_margin = _swig_property(exlib_window_swig_py.sg_plotter_up_margin_get, exlib_window_swig_py.sg_plotter_up_margin_set)
    title_up = _swig_property(exlib_window_swig_py.sg_plotter_title_up_get, exlib_window_swig_py.sg_plotter_title_up_set)
    title_to_axis = _swig_property(exlib_window_swig_py.sg_plotter_title_to_axis_get, exlib_window_swig_py.sg_plotter_title_to_axis_set)
    title_height = _swig_property(exlib_window_swig_py.sg_plotter_title_height_get, exlib_window_swig_py.sg_plotter_title_height_set)
    title_automated = _swig_property(exlib_window_swig_py.sg_plotter_title_automated_get, exlib_window_swig_py.sg_plotter_title_automated_set)
    title_hjust = _swig_property(exlib_window_swig_py.sg_plotter_title_hjust_get, exlib_window_swig_py.sg_plotter_title_hjust_set)
    title = _swig_property(exlib_window_swig_py.sg_plotter_title_get, exlib_window_swig_py.sg_plotter_title_set)
    colormap_visible = _swig_property(exlib_window_swig_py.sg_plotter_colormap_visible_get, exlib_window_swig_py.sg_plotter_colormap_visible_set)
    cells = exlib_window_swig_py.sg_plotter_cells
    min_max = exlib_window_swig_py.sg_plotter_min_max
    colormap_axis_labeling = _swig_property(exlib_window_swig_py.sg_plotter_colormap_axis_labeling_get, exlib_window_swig_py.sg_plotter_colormap_axis_labeling_set)
    colormap_attached = _swig_property(exlib_window_swig_py.sg_plotter_colormap_attached_get, exlib_window_swig_py.sg_plotter_colormap_attached_set)
    colormap_axis_visible = _swig_property(exlib_window_swig_py.sg_plotter_colormap_axis_visible_get, exlib_window_swig_py.sg_plotter_colormap_axis_visible_set)
    x_axis_enforced = _swig_property(exlib_window_swig_py.sg_plotter_x_axis_enforced_get, exlib_window_swig_py.sg_plotter_x_axis_enforced_set)
    x_axis_automated = _swig_property(exlib_window_swig_py.sg_plotter_x_axis_automated_get, exlib_window_swig_py.sg_plotter_x_axis_automated_set)
    x_axis_min = _swig_property(exlib_window_swig_py.sg_plotter_x_axis_min_get, exlib_window_swig_py.sg_plotter_x_axis_min_set)
    x_axis_max = _swig_property(exlib_window_swig_py.sg_plotter_x_axis_max_get, exlib_window_swig_py.sg_plotter_x_axis_max_set)
    x_axis_is_log = _swig_property(exlib_window_swig_py.sg_plotter_x_axis_is_log_get, exlib_window_swig_py.sg_plotter_x_axis_is_log_set)
    y_axis_enforced = _swig_property(exlib_window_swig_py.sg_plotter_y_axis_enforced_get, exlib_window_swig_py.sg_plotter_y_axis_enforced_set)
    y_axis_automated = _swig_property(exlib_window_swig_py.sg_plotter_y_axis_automated_get, exlib_window_swig_py.sg_plotter_y_axis_automated_set)
    y_axis_min = _swig_property(exlib_window_swig_py.sg_plotter_y_axis_min_get, exlib_window_swig_py.sg_plotter_y_axis_min_set)
    y_axis_max = _swig_property(exlib_window_swig_py.sg_plotter_y_axis_max_get, exlib_window_swig_py.sg_plotter_y_axis_max_set)
    y_axis_is_log = _swig_property(exlib_window_swig_py.sg_plotter_y_axis_is_log_get, exlib_window_swig_py.sg_plotter_y_axis_is_log_set)
    z_axis_enforced = _swig_property(exlib_window_swig_py.sg_plotter_z_axis_enforced_get, exlib_window_swig_py.sg_plotter_z_axis_enforced_set)
    z_axis_automated = _swig_property(exlib_window_swig_py.sg_plotter_z_axis_automated_get, exlib_window_swig_py.sg_plotter_z_axis_automated_set)
    z_axis_min = _swig_property(exlib_window_swig_py.sg_plotter_z_axis_min_get, exlib_window_swig_py.sg_plotter_z_axis_min_set)
    z_axis_max = _swig_property(exlib_window_swig_py.sg_plotter_z_axis_max_get, exlib_window_swig_py.sg_plotter_z_axis_max_set)
    z_axis_is_log = _swig_property(exlib_window_swig_py.sg_plotter_z_axis_is_log_get, exlib_window_swig_py.sg_plotter_z_axis_is_log_set)
    value_top_margin = _swig_property(exlib_window_swig_py.sg_plotter_value_top_margin_get, exlib_window_swig_py.sg_plotter_value_top_margin_set)
    infos_width = _swig_property(exlib_window_swig_py.sg_plotter_infos_width_get, exlib_window_swig_py.sg_plotter_infos_width_set)
    infos_x_margin = _swig_property(exlib_window_swig_py.sg_plotter_infos_x_margin_get, exlib_window_swig_py.sg_plotter_infos_x_margin_set)
    infos_y_margin = _swig_property(exlib_window_swig_py.sg_plotter_infos_y_margin_get, exlib_window_swig_py.sg_plotter_infos_y_margin_set)
    infos_what = _swig_property(exlib_window_swig_py.sg_plotter_infos_what_get, exlib_window_swig_py.sg_plotter_infos_what_set)
    func2D_borders_visible = _swig_property(exlib_window_swig_py.sg_plotter_func2D_borders_visible_get, exlib_window_swig_py.sg_plotter_func2D_borders_visible_set)
    theta = _swig_property(exlib_window_swig_py.sg_plotter_theta_get, exlib_window_swig_py.sg_plotter_theta_set)
    phi = _swig_property(exlib_window_swig_py.sg_plotter_phi_get, exlib_window_swig_py.sg_plotter_phi_set)
    tau = _swig_property(exlib_window_swig_py.sg_plotter_tau_get, exlib_window_swig_py.sg_plotter_tau_set)
    legends_automated = _swig_property(exlib_window_swig_py.sg_plotter_legends_automated_get, exlib_window_swig_py.sg_plotter_legends_automated_set)
    legends_origin = _swig_property(exlib_window_swig_py.sg_plotter_legends_origin_get, exlib_window_swig_py.sg_plotter_legends_origin_set)
    unit_percent = exlib_window_swig_py.sg_plotter_unit_percent
    unit_axis = exlib_window_swig_py.sg_plotter_unit_axis
    legends_origin_unit = _swig_property(exlib_window_swig_py.sg_plotter_legends_origin_unit_get, exlib_window_swig_py.sg_plotter_legends_origin_unit_set)
    legends_size = _swig_property(exlib_window_swig_py.sg_plotter_legends_size_get, exlib_window_swig_py.sg_plotter_legends_size_set)
    legends_string = _swig_property(exlib_window_swig_py.sg_plotter_legends_string_get, exlib_window_swig_py.sg_plotter_legends_string_set)
    shape_automated = _swig_property(exlib_window_swig_py.sg_plotter_shape_automated_get, exlib_window_swig_py.sg_plotter_shape_automated_set)
    xy = exlib_window_swig_py.sg_plotter_xy
    xyz = exlib_window_swig_py.sg_plotter_xyz
    shape = _swig_property(exlib_window_swig_py.sg_plotter_shape_get, exlib_window_swig_py.sg_plotter_shape_set)
    xy_depth = _swig_property(exlib_window_swig_py.sg_plotter_xy_depth_get, exlib_window_swig_py.sg_plotter_xy_depth_set)
    curve_number_of_points = _swig_property(exlib_window_swig_py.sg_plotter_curve_number_of_points_get, exlib_window_swig_py.sg_plotter_curve_number_of_points_set)
    data_light_on_automated = _swig_property(exlib_window_swig_py.sg_plotter_data_light_on_automated_get, exlib_window_swig_py.sg_plotter_data_light_on_automated_set)
    primitives_enforced = _swig_property(exlib_window_swig_py.sg_plotter_primitives_enforced_get, exlib_window_swig_py.sg_plotter_primitives_enforced_set)
    inner_frame_enforced = _swig_property(exlib_window_swig_py.sg_plotter_inner_frame_enforced_get, exlib_window_swig_py.sg_plotter_inner_frame_enforced_set)
    top_axis_visible = _swig_property(exlib_window_swig_py.sg_plotter_top_axis_visible_get, exlib_window_swig_py.sg_plotter_top_axis_visible_set)
    right_axis_visible = _swig_property(exlib_window_swig_py.sg_plotter_right_axis_visible_get, exlib_window_swig_py.sg_plotter_right_axis_visible_set)
    superpose_bins = _swig_property(exlib_window_swig_py.sg_plotter_superpose_bins_get, exlib_window_swig_py.sg_plotter_superpose_bins_set)
    number_of_levels = _swig_property(exlib_window_swig_py.sg_plotter_number_of_levels_get, exlib_window_swig_py.sg_plotter_number_of_levels_set)
    levels = _swig_property(exlib_window_swig_py.sg_plotter_levels_get, exlib_window_swig_py.sg_plotter_levels_set)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_plotter
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_plotter(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_plottable(self, *args): return exlib_window_swig_py.sg_plotter_add_plottable(self, *args)
    def bins_style(self, *args): return exlib_window_swig_py.sg_plotter_bins_style(self, *args)
    def points_style(self, *args): return exlib_window_swig_py.sg_plotter_points_style(self, *args)
    def func_style(self, *args): return exlib_window_swig_py.sg_plotter_func_style(self, *args)
    def errors_style(self, *args): return exlib_window_swig_py.sg_plotter_errors_style(self, *args)
    def left_hatch_style(self, *args): return exlib_window_swig_py.sg_plotter_left_hatch_style(self, *args)
    def right_hatch_style(self, *args): return exlib_window_swig_py.sg_plotter_right_hatch_style(self, *args)
    def legend_style(self, *args): return exlib_window_swig_py.sg_plotter_legend_style(self, *args)
    def infos_style(self): return exlib_window_swig_py.sg_plotter_infos_style(self)
    def clear(self): return exlib_window_swig_py.sg_plotter_clear(self)
    def etc_sep(self, *args): return exlib_window_swig_py.sg_plotter_etc_sep(self, *args)
    def plot(self, *args): return exlib_window_swig_py.sg_plotter_plot(self, *args)
    def plot_cp(self, *args): return exlib_window_swig_py.sg_plotter_plot_cp(self, *args)
sg_plotter_swigregister = exlib_window_swig_py.sg_plotter_swigregister
sg_plotter_swigregister(sg_plotter)

class sg_plots(sg_node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def copy(self): return exlib_window_swig_py.sg_plots_copy(self)
    width = _swig_property(exlib_window_swig_py.sg_plots_width_get, exlib_window_swig_py.sg_plots_width_set)
    height = _swig_property(exlib_window_swig_py.sg_plots_height_get, exlib_window_swig_py.sg_plots_height_set)
    cols = _swig_property(exlib_window_swig_py.sg_plots_cols_get, exlib_window_swig_py.sg_plots_cols_set)
    rows = _swig_property(exlib_window_swig_py.sg_plots_rows_get, exlib_window_swig_py.sg_plots_rows_set)
    view_border = _swig_property(exlib_window_swig_py.sg_plots_view_border_get, exlib_window_swig_py.sg_plots_view_border_set)
    plotter_scale = _swig_property(exlib_window_swig_py.sg_plots_plotter_scale_get, exlib_window_swig_py.sg_plots_plotter_scale_set)
    border_visible = _swig_property(exlib_window_swig_py.sg_plots_border_visible_get, exlib_window_swig_py.sg_plots_border_visible_set)
    border_width = _swig_property(exlib_window_swig_py.sg_plots_border_width_get, exlib_window_swig_py.sg_plots_border_width_set)
    border_height = _swig_property(exlib_window_swig_py.sg_plots_border_height_get, exlib_window_swig_py.sg_plots_border_height_set)
    border_color = _swig_property(exlib_window_swig_py.sg_plots_border_color_get, exlib_window_swig_py.sg_plots_border_color_set)
    left_margin = _swig_property(exlib_window_swig_py.sg_plots_left_margin_get, exlib_window_swig_py.sg_plots_left_margin_set)
    right_margin = _swig_property(exlib_window_swig_py.sg_plots_right_margin_get, exlib_window_swig_py.sg_plots_right_margin_set)
    top_margin = _swig_property(exlib_window_swig_py.sg_plots_top_margin_get, exlib_window_swig_py.sg_plots_top_margin_set)
    bottom_margin = _swig_property(exlib_window_swig_py.sg_plots_bottom_margin_get, exlib_window_swig_py.sg_plots_bottom_margin_set)
    horizontal_spacing = _swig_property(exlib_window_swig_py.sg_plots_horizontal_spacing_get, exlib_window_swig_py.sg_plots_horizontal_spacing_set)
    vertical_spacing = _swig_property(exlib_window_swig_py.sg_plots_vertical_spacing_get, exlib_window_swig_py.sg_plots_vertical_spacing_set)
    __swig_destroy__ = exlib_window_swig_py.delete_sg_plots
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_plots(*args)
        try: self.this.append(this)
        except: self.this = this
    def current_plotter(self): return exlib_window_swig_py.sg_plots_current_plotter(self)
    def number(self): return exlib_window_swig_py.sg_plots_number(self)
    def current_index(self): return exlib_window_swig_py.sg_plots_current_index(self)
    def set_regions(self, a_cols=1, a_rows=1, a_transfer=False): return exlib_window_swig_py.sg_plots_set_regions(self, a_cols, a_rows, a_transfer)
    def next(self): return exlib_window_swig_py.sg_plots_next(self)
    def set_current_plotter(self, *args): return exlib_window_swig_py.sg_plots_set_current_plotter(self, *args)
    def adjust_size(self, *args): return exlib_window_swig_py.sg_plots_adjust_size(self, *args)
sg_plots_swigregister = exlib_window_swig_py.sg_plots_swigregister
sg_plots_swigregister(sg_plots)


def sg_set_plotter_camera(*args):
  return exlib_window_swig_py.sg_set_plotter_camera(*args)
sg_set_plotter_camera = exlib_window_swig_py.sg_set_plotter_camera
class viewer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_viewer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_viewer(*args)
        try: self.this.append(this)
        except: self.this = this
    def out(self): return exlib_window_swig_py.viewer_out(self)
    def width(self): return exlib_window_swig_py.viewer_width(self)
    def height(self): return exlib_window_swig_py.viewer_height(self)
    def sg(self, *args): return exlib_window_swig_py.viewer_sg(self, *args)
viewer_swigregister = exlib_window_swig_py.viewer_swigregister
viewer_swigregister(viewer)


def cast_viewer(*args):
  return exlib_window_swig_py.cast_viewer(*args)
cast_viewer = exlib_window_swig_py.cast_viewer
class render_manager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
render_manager_swigregister = exlib_window_swig_py.render_manager_swigregister
render_manager_swigregister(render_manager)

class wps(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_wps(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_wps
    __del__ = lambda self : None;
    def open_file(self, *args): return exlib_window_swig_py.wps_open_file(self, *args)
    def close_file(self): return exlib_window_swig_py.wps_close_file(self)
    def PS_PAGE_SCALE(self, *args): return exlib_window_swig_py.wps_PS_PAGE_SCALE(self, *args)
    def PS_SCALE(self, *args): return exlib_window_swig_py.wps_PS_SCALE(self, *args)
    def PS_TRANSLATE(self, *args): return exlib_window_swig_py.wps_PS_TRANSLATE(self, *args)
    def PS_ROTATE(self, *args): return exlib_window_swig_py.wps_PS_ROTATE(self, *args)
    def PS_SAVE(self): return exlib_window_swig_py.wps_PS_SAVE(self)
    def PS_RESTORE(self): return exlib_window_swig_py.wps_PS_RESTORE(self)
    def PS_BEGIN_PAGE(self): return exlib_window_swig_py.wps_PS_BEGIN_PAGE(self)
    def PS_END_PAGE(self): return exlib_window_swig_py.wps_PS_END_PAGE(self)
    def PS_IMAGE(self, *args): return exlib_window_swig_py.wps_PS_IMAGE(self, *args)
wps_swigregister = exlib_window_swig_py.wps_swigregister
wps_swigregister(wps)

class zb_buffer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = exlib_window_swig_py.new_zb_buffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_zb_buffer
    __del__ = lambda self : None;
    def clear_color_buffer(self, *args): return exlib_window_swig_py.zb_buffer_clear_color_buffer(self, *args)
    def clear_depth_buffer(self): return exlib_window_swig_py.zb_buffer_clear_depth_buffer(self)
zb_buffer_swigregister = exlib_window_swig_py.zb_buffer_swigregister
zb_buffer_swigregister(zb_buffer)

class sg_zb_manager(render_manager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_zb_manager
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_zb_manager(*args)
        try: self.this.append(this)
        except: self.this = this
sg_zb_manager_swigregister = exlib_window_swig_py.sg_zb_manager_swigregister
sg_zb_manager_swigregister(sg_zb_manager)

class sg_zb_action(render_action):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_zb_action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_sg_zb_action
    __del__ = lambda self : None;
    def reset(self): return exlib_window_swig_py.sg_zb_action_reset(self)
    def zbuffer(self, *args): return exlib_window_swig_py.sg_zb_action_zbuffer(self, *args)
    def add_color(self, *args): return exlib_window_swig_py.sg_zb_action_add_color(self, *args)
sg_zb_action_swigregister = exlib_window_swig_py.sg_zb_action_swigregister
sg_zb_action_swigregister(sg_zb_action)

class sg_write_bsg(write_action):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def protocol(self): return exlib_window_swig_py.sg_write_bsg_protocol(self)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_write_bsg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_sg_write_bsg
    __del__ = lambda self : None;
    def open_buffer(self): return exlib_window_swig_py.sg_write_bsg_open_buffer(self)
    def close_buffer(self): return exlib_window_swig_py.sg_write_bsg_close_buffer(self)
    def write_file(self, *args): return exlib_window_swig_py.sg_write_bsg_write_file(self, *args)
sg_write_bsg_swigregister = exlib_window_swig_py.sg_write_bsg_swigregister
sg_write_bsg_swigregister(sg_write_bsg)


def net_serror():
  return exlib_window_swig_py.net_serror()
net_serror = exlib_window_swig_py.net_serror
class base_socket(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def disconnect(self): return exlib_window_swig_py.base_socket_disconnect(self)
    __swig_destroy__ = exlib_window_swig_py.delete_base_socket
    __del__ = lambda self : None;
    def verbose(self): return exlib_window_swig_py.base_socket_verbose(self)
    def set_verbose(self, *args): return exlib_window_swig_py.base_socket_set_verbose(self, *args)
    def is_connected(self): return exlib_window_swig_py.base_socket_is_connected(self)
    def out(self): return exlib_window_swig_py.base_socket_out(self)
    def close(self): return exlib_window_swig_py.base_socket_close(self)
    def send_uchar(self, *args): return exlib_window_swig_py.base_socket_send_uchar(self, *args)
    def send_bool(self, *args): return exlib_window_swig_py.base_socket_send_bool(self, *args)
    def fetch_bool(self, *args): return exlib_window_swig_py.base_socket_fetch_bool(self, *args)
    def send_string(self, *args): return exlib_window_swig_py.base_socket_send_string(self, *args)
    def send_text(self, *args): return exlib_window_swig_py.base_socket_send_text(self, *args)
    def send_file(self, *args): return exlib_window_swig_py.base_socket_send_file(self, *args)
    def fetch_file(self, *args): return exlib_window_swig_py.base_socket_fetch_file(self, *args)
    def is_active(self, a_micro_secs=10): return exlib_window_swig_py.base_socket_is_active(self, a_micro_secs)
base_socket_swigregister = exlib_window_swig_py.base_socket_swigregister
base_socket_swigregister(base_socket)


def net_herror():
  return exlib_window_swig_py.net_herror()
net_herror = exlib_window_swig_py.net_herror
class net_inet_socket(base_socket):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def disconnect(self): return exlib_window_swig_py.net_inet_socket_disconnect(self)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_net_inet_socket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_net_inet_socket
    __del__ = lambda self : None;
    def bind(self, *args): return exlib_window_swig_py.net_inet_socket_bind(self, *args)
    def set_dump_ECONNABORTED(self, *args): return exlib_window_swig_py.net_inet_socket_set_dump_ECONNABORTED(self, *args)
    def bind_accept(self, *args): return exlib_window_swig_py.net_inet_socket_bind_accept(self, *args)
    def connect(self, *args): return exlib_window_swig_py.net_inet_socket_connect(self, *args)
net_inet_socket_swigregister = exlib_window_swig_py.net_inet_socket_swigregister
net_inet_socket_swigregister(net_inet_socket)


def net_host_name(*args):
  return exlib_window_swig_py.net_host_name(*args)
net_host_name = exlib_window_swig_py.net_host_name

def net_inet_sip(*args):
  return exlib_window_swig_py.net_inet_sip(*args)
net_inet_sip = exlib_window_swig_py.net_inet_sip
class net_sg_client(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_net_sg_client(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_net_sg_client
    __del__ = lambda self : None;
    def is_connected(self): return exlib_window_swig_py.net_sg_client_is_connected(self)
    def socket(self): return exlib_window_swig_py.net_sg_client_socket(self)
    def out(self): return exlib_window_swig_py.net_sg_client_out(self)
    def initialize(self, *args): return exlib_window_swig_py.net_sg_client_initialize(self, *args)
    def steer(self): return exlib_window_swig_py.net_sg_client_steer(self)
    def poll(self): return exlib_window_swig_py.net_sg_client_poll(self)
    def send_string(self, *args): return exlib_window_swig_py.net_sg_client_send_string(self, *args)
    def get_sg_serv_params(self, *args): return exlib_window_swig_py.net_sg_client_get_sg_serv_params(self, *args)
    def send_sg(self, *args): return exlib_window_swig_py.net_sg_client_send_sg(self, *args)
net_sg_client_swigregister = exlib_window_swig_py.net_sg_client_swigregister
net_sg_client_swigregister(net_sg_client)


def sg_s_send_placement():
  return exlib_window_swig_py.sg_s_send_placement()
sg_s_send_placement = exlib_window_swig_py.sg_s_send_placement

def sg_s_placement_static():
  return exlib_window_swig_py.sg_s_placement_static()
sg_s_placement_static = exlib_window_swig_py.sg_s_placement_static

def sg_s_placement_dynamic():
  return exlib_window_swig_py.sg_s_placement_dynamic()
sg_s_placement_dynamic = exlib_window_swig_py.sg_s_placement_dynamic

def sg_s_placement_screen():
  return exlib_window_swig_py.sg_s_placement_screen()
sg_s_placement_screen = exlib_window_swig_py.sg_s_placement_screen

def sg_s_send_radius():
  return exlib_window_swig_py.sg_s_send_radius()
sg_s_send_radius = exlib_window_swig_py.sg_s_send_radius

def sg_s_send_scale():
  return exlib_window_swig_py.sg_s_send_scale()
sg_s_send_scale = exlib_window_swig_py.sg_s_send_scale

def sg_s_send_clear():
  return exlib_window_swig_py.sg_s_send_clear()
sg_s_send_clear = exlib_window_swig_py.sg_s_send_clear

def sg_s_protocol_start():
  return exlib_window_swig_py.sg_s_protocol_start()
sg_s_protocol_start = exlib_window_swig_py.sg_s_protocol_start

def sg_s_protocol_disconnect():
  return exlib_window_swig_py.sg_s_protocol_disconnect()
sg_s_protocol_disconnect = exlib_window_swig_py.sg_s_protocol_disconnect

def sg_s_protocol_zdoc():
  return exlib_window_swig_py.sg_s_protocol_zdoc()
sg_s_protocol_zdoc = exlib_window_swig_py.sg_s_protocol_zdoc

def sg_s_protocol_arg_sep():
  return exlib_window_swig_py.sg_s_protocol_arg_sep()
sg_s_protocol_arg_sep = exlib_window_swig_py.sg_s_protocol_arg_sep

def sg_s_protocol_clear_static_sg():
  return exlib_window_swig_py.sg_s_protocol_clear_static_sg()
sg_s_protocol_clear_static_sg = exlib_window_swig_py.sg_s_protocol_clear_static_sg

def sg_s_protocol_clear_dynamic_sg():
  return exlib_window_swig_py.sg_s_protocol_clear_dynamic_sg()
sg_s_protocol_clear_dynamic_sg = exlib_window_swig_py.sg_s_protocol_clear_dynamic_sg

def sg_s_protocol_clear_screen_sg():
  return exlib_window_swig_py.sg_s_protocol_clear_screen_sg()
sg_s_protocol_clear_screen_sg = exlib_window_swig_py.sg_s_protocol_clear_screen_sg

def sg_s_protocol_view_all():
  return exlib_window_swig_py.sg_s_protocol_view_all()
sg_s_protocol_view_all = exlib_window_swig_py.sg_s_protocol_view_all

def sg_s_protocol_set_background_black():
  return exlib_window_swig_py.sg_s_protocol_set_background_black()
sg_s_protocol_set_background_black = exlib_window_swig_py.sg_s_protocol_set_background_black

def sg_s_protocol_set_background_white():
  return exlib_window_swig_py.sg_s_protocol_set_background_white()
sg_s_protocol_set_background_white = exlib_window_swig_py.sg_s_protocol_set_background_white

def sg_s_protocol_disable_anim():
  return exlib_window_swig_py.sg_s_protocol_disable_anim()
sg_s_protocol_disable_anim = exlib_window_swig_py.sg_s_protocol_disable_anim

def sg_s_protocol_reset_camera():
  return exlib_window_swig_py.sg_s_protocol_reset_camera()
sg_s_protocol_reset_camera = exlib_window_swig_py.sg_s_protocol_reset_camera
class gui_viewer(viewer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def res_dir(self): return exlib_window_swig_py.gui_viewer_res_dir(self)
    def opener(self): return exlib_window_swig_py.gui_viewer_opener(self)
    def show_console(self, *args): return exlib_window_swig_py.gui_viewer_show_console(self, *args)
    def hide_console(self): return exlib_window_swig_py.gui_viewer_hide_console(self)
    def set_console_size(self, arg2=0.3, arg3=0.05, arg4=1): return exlib_window_swig_py.gui_viewer_set_console_size(self, arg2, arg3, arg4)
    def hide_main_menu(self): return exlib_window_swig_py.gui_viewer_hide_main_menu(self)
    def show_main_menu(self): return exlib_window_swig_py.gui_viewer_show_main_menu(self)
    def hide_camera_menu(self): return exlib_window_swig_py.gui_viewer_hide_camera_menu(self)
    def show_camera_menu(self): return exlib_window_swig_py.gui_viewer_show_camera_menu(self)
    def adapt_camera_to_scene(self): return exlib_window_swig_py.gui_viewer_adapt_camera_to_scene(self)
    def view_all(self): return exlib_window_swig_py.gui_viewer_view_all(self)
    def set_scene_light_on(self, *args): return exlib_window_swig_py.gui_viewer_set_scene_light_on(self, *args)
    def toggle_light(self): return exlib_window_swig_py.gui_viewer_toggle_light(self)
    def set_plane_viewer(self, *args): return exlib_window_swig_py.gui_viewer_set_plane_viewer(self, *args)
    def hide_meta_zone(self): return exlib_window_swig_py.gui_viewer_hide_meta_zone(self)
    def set_scene_clear_color(self, *args): return exlib_window_swig_py.gui_viewer_set_scene_clear_color(self, *args)
    def set_gui_clear_color(self, *args): return exlib_window_swig_py.gui_viewer_set_gui_clear_color(self, *args)
    def reset_camera(self): return exlib_window_swig_py.gui_viewer_reset_camera(self)
    def scene(self, *args): return exlib_window_swig_py.gui_viewer_scene(self, *args)
    def styles(self, *args): return exlib_window_swig_py.gui_viewer_styles(self, *args)
    def set_scene_camera(self, *args): return exlib_window_swig_py.gui_viewer_set_scene_camera(self, *args)
    def scene_camera(self): return exlib_window_swig_py.gui_viewer_scene_camera(self)
    def set_scene_light(self, *args): return exlib_window_swig_py.gui_viewer_set_scene_light(self, *args)
    s_default = staticmethod(exlib_window_swig_py.gui_viewer_s_default)
    def first_data_dir(self, *args): return exlib_window_swig_py.gui_viewer_first_data_dir(self, *args)
    def find_file(self, *args): return exlib_window_swig_py.gui_viewer_find_file(self, *args)
gui_viewer_swigregister = exlib_window_swig_py.gui_viewer_swigregister
gui_viewer_swigregister(gui_viewer)

def gui_viewer_s_default():
  return exlib_window_swig_py.gui_viewer_s_default()
gui_viewer_s_default = exlib_window_swig_py.gui_viewer_s_default


def cast_gui_viewer(*args):
  return exlib_window_swig_py.cast_gui_viewer(*args)
cast_gui_viewer = exlib_window_swig_py.cast_gui_viewer

def get_sg_plots(*args):
  return exlib_window_swig_py.get_sg_plots(*args)
get_sg_plots = exlib_window_swig_py.get_sg_plots

def sg_style_from_res(*args):
  return exlib_window_swig_py.sg_style_from_res(*args)
sg_style_from_res = exlib_window_swig_py.sg_style_from_res
class waxml_file(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = exlib_window_swig_py.new_waxml_file()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_waxml_file
    __del__ = lambda self : None;
    def open(self, *args): return exlib_window_swig_py.waxml_file_open(self, *args)
    def close(self): return exlib_window_swig_py.waxml_file_close(self)
    def write(self, *args): return exlib_window_swig_py.waxml_file_write(self, *args)
waxml_file_swigregister = exlib_window_swig_py.waxml_file_swigregister
waxml_file_swigregister(waxml_file)

class ifile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
ifile_swigregister = exlib_window_swig_py.ifile_swigregister
ifile_swigregister(ifile)

class key(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_key(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_key
    __del__ = lambda self : None;
key_swigregister = exlib_window_swig_py.key_swigregister
key_swigregister(key)

class ifac(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
ifac_swigregister = exlib_window_swig_py.ifac_swigregister
ifac_swigregister(ifac)

class rroot_fac(ifac):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_fac
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rroot_fac(*args)
        try: self.this.append(this)
        except: self.this = this
rroot_fac_swigregister = exlib_window_swig_py.rroot_fac_swigregister
rroot_fac_swigregister(rroot_fac)

class std_vector_keys(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return exlib_window_swig_py.std_vector_keys_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return exlib_window_swig_py.std_vector_keys___nonzero__(self)
    def __bool__(self): return exlib_window_swig_py.std_vector_keys___bool__(self)
    def __len__(self): return exlib_window_swig_py.std_vector_keys___len__(self)
    def pop(self): return exlib_window_swig_py.std_vector_keys_pop(self)
    def __getslice__(self, *args): return exlib_window_swig_py.std_vector_keys___getslice__(self, *args)
    def __setslice__(self, *args): return exlib_window_swig_py.std_vector_keys___setslice__(self, *args)
    def __delslice__(self, *args): return exlib_window_swig_py.std_vector_keys___delslice__(self, *args)
    def __delitem__(self, *args): return exlib_window_swig_py.std_vector_keys___delitem__(self, *args)
    def __getitem__(self, *args): return exlib_window_swig_py.std_vector_keys___getitem__(self, *args)
    def __setitem__(self, *args): return exlib_window_swig_py.std_vector_keys___setitem__(self, *args)
    def append(self, *args): return exlib_window_swig_py.std_vector_keys_append(self, *args)
    def empty(self): return exlib_window_swig_py.std_vector_keys_empty(self)
    def size(self): return exlib_window_swig_py.std_vector_keys_size(self)
    def clear(self): return exlib_window_swig_py.std_vector_keys_clear(self)
    def swap(self, *args): return exlib_window_swig_py.std_vector_keys_swap(self, *args)
    def get_allocator(self): return exlib_window_swig_py.std_vector_keys_get_allocator(self)
    def begin(self): return exlib_window_swig_py.std_vector_keys_begin(self)
    def end(self): return exlib_window_swig_py.std_vector_keys_end(self)
    def rbegin(self): return exlib_window_swig_py.std_vector_keys_rbegin(self)
    def rend(self): return exlib_window_swig_py.std_vector_keys_rend(self)
    def pop_back(self): return exlib_window_swig_py.std_vector_keys_pop_back(self)
    def erase(self, *args): return exlib_window_swig_py.std_vector_keys_erase(self, *args)
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_std_vector_keys(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return exlib_window_swig_py.std_vector_keys_push_back(self, *args)
    def front(self): return exlib_window_swig_py.std_vector_keys_front(self)
    def back(self): return exlib_window_swig_py.std_vector_keys_back(self)
    def assign(self, *args): return exlib_window_swig_py.std_vector_keys_assign(self, *args)
    def resize(self, *args): return exlib_window_swig_py.std_vector_keys_resize(self, *args)
    def insert(self, *args): return exlib_window_swig_py.std_vector_keys_insert(self, *args)
    def reserve(self, *args): return exlib_window_swig_py.std_vector_keys_reserve(self, *args)
    def capacity(self): return exlib_window_swig_py.std_vector_keys_capacity(self)
    __swig_destroy__ = exlib_window_swig_py.delete_std_vector_keys
    __del__ = lambda self : None;
std_vector_keys_swigregister = exlib_window_swig_py.std_vector_keys_swigregister
std_vector_keys_swigregister(std_vector_keys)

class directory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_directory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_directory
    __del__ = lambda self : None;
    def find_key(self, *args): return exlib_window_swig_py.directory_find_key(self, *args)
    def keys(self, *args): return exlib_window_swig_py.directory_keys(self, *args)
directory_swigregister = exlib_window_swig_py.directory_swigregister
directory_swigregister(directory)

class rroot_file(ifile):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rroot_file(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_file
    __del__ = lambda self : None;
    def is_open(self): return exlib_window_swig_py.rroot_file_is_open(self)
    def close(self): return exlib_window_swig_py.rroot_file_close(self)
    def dir(self): return exlib_window_swig_py.rroot_file_dir(self)
rroot_file_swigregister = exlib_window_swig_py.rroot_file_swigregister
rroot_file_swigregister(rroot_file)

class TDirectory(directory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_TDirectory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_TDirectory
    __del__ = lambda self : None;
TDirectory_swigregister = exlib_window_swig_py.TDirectory_swigregister
TDirectory_swigregister(TDirectory)


def rroot_find_dir(*args):
  return exlib_window_swig_py.rroot_find_dir(*args)
rroot_find_dir = exlib_window_swig_py.rroot_find_dir

def rroot_key_to_h1d(*args):
  return exlib_window_swig_py.rroot_key_to_h1d(*args)
rroot_key_to_h1d = exlib_window_swig_py.rroot_key_to_h1d

def rroot_read(*args):
  return exlib_window_swig_py.rroot_read(*args)
rroot_read = exlib_window_swig_py.rroot_read
class rroot_branch(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rroot_branch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_branch
    __del__ = lambda self : None;
    def find_entry(self, *args): return exlib_window_swig_py.rroot_branch_find_entry(self, *args)
rroot_branch_swigregister = exlib_window_swig_py.rroot_branch_swigregister
rroot_branch_swigregister(rroot_branch)

class rroot_leaf_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_leaf_int
    __del__ = lambda self : None;
    def value(self, *args): return exlib_window_swig_py.rroot_leaf_int_value(self, *args)
rroot_leaf_int_swigregister = exlib_window_swig_py.rroot_leaf_int_swigregister
rroot_leaf_int_swigregister(rroot_leaf_int)

def leaf_int(*args):
    val = exlib_window_swig_py.new_leaf_int(*args)
    return val

class rroot_leaf_float(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_leaf_float
    __del__ = lambda self : None;
    def value(self, *args): return exlib_window_swig_py.rroot_leaf_float_value(self, *args)
rroot_leaf_float_swigregister = exlib_window_swig_py.rroot_leaf_float_swigregister
rroot_leaf_float_swigregister(rroot_leaf_float)

def leaf_float(*args):
    val = exlib_window_swig_py.new_leaf_float(*args)
    return val

class rroot_leaf_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_leaf_double
    __del__ = lambda self : None;
    def value(self, *args): return exlib_window_swig_py.rroot_leaf_double_value(self, *args)
rroot_leaf_double_swigregister = exlib_window_swig_py.rroot_leaf_double_swigregister
rroot_leaf_double_swigregister(rroot_leaf_double)

def leaf_double(*args):
    val = exlib_window_swig_py.new_leaf_double(*args)
    return val

class rroot_base_leaf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def s_cls(self): return exlib_window_swig_py.rroot_base_leaf_s_cls(self)
rroot_base_leaf_swigregister = exlib_window_swig_py.rroot_base_leaf_swigregister
rroot_base_leaf_swigregister(rroot_base_leaf)


def rroot_cast_leaf_int(*args):
  return exlib_window_swig_py.rroot_cast_leaf_int(*args)
rroot_cast_leaf_int = exlib_window_swig_py.rroot_cast_leaf_int

def rroot_cast_leaf_float(*args):
  return exlib_window_swig_py.rroot_cast_leaf_float(*args)
rroot_cast_leaf_float = exlib_window_swig_py.rroot_cast_leaf_float

def rroot_cast_leaf_double(*args):
  return exlib_window_swig_py.rroot_cast_leaf_double(*args)
rroot_cast_leaf_double = exlib_window_swig_py.rroot_cast_leaf_double
class rroot_tree(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_rroot_tree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_rroot_tree
    __del__ = lambda self : None;
    def show(self, *args): return exlib_window_swig_py.rroot_tree_show(self, *args)
    def find_branch(self, *args): return exlib_window_swig_py.rroot_tree_find_branch(self, *args)
    def find_leaf(self, *args): return exlib_window_swig_py.rroot_tree_find_leaf(self, *args)
    def find_leaf_branch(self, *args): return exlib_window_swig_py.rroot_tree_find_leaf_branch(self, *args)
    def entries(self): return exlib_window_swig_py.rroot_tree_entries(self)
rroot_tree_swigregister = exlib_window_swig_py.rroot_tree_swigregister
rroot_tree_swigregister(rroot_tree)


def rroot_key_to_tree(*args):
  return exlib_window_swig_py.rroot_key_to_tree(*args)
rroot_key_to_tree = exlib_window_swig_py.rroot_key_to_tree

def spark_greet():
  return exlib_window_swig_py.spark_greet()
spark_greet = exlib_window_swig_py.spark_greet

def spark_get_xyzs(*args):
  return exlib_window_swig_py.spark_get_xyzs(*args)
spark_get_xyzs = exlib_window_swig_py.spark_get_xyzs

def fits_image_read_slice_to_img(*args):
  return exlib_window_swig_py.fits_image_read_slice_to_img(*args)
fits_image_read_slice_to_img = exlib_window_swig_py.fits_image_read_slice_to_img

def xml_load_style_file(*args):
  return exlib_window_swig_py.xml_load_style_file(*args)
xml_load_style_file = exlib_window_swig_py.xml_load_style_file
class sg_text_freetype(base_freetype):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_sg_text_freetype
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_text_freetype(*args)
        try: self.this.append(this)
        except: self.this = this
sg_text_freetype_swigregister = exlib_window_swig_py.sg_text_freetype_swigregister
sg_text_freetype_swigregister(sg_text_freetype)

class sg_gl2ps_manager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = exlib_window_swig_py.new_sg_gl2ps_manager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_sg_gl2ps_manager
    __del__ = lambda self : None;
sg_gl2ps_manager_swigregister = exlib_window_swig_py.sg_gl2ps_manager_swigregister
sg_gl2ps_manager_swigregister(sg_gl2ps_manager)

class sg_gl2ps_action(render_action):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_gl2ps_action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_sg_gl2ps_action
    __del__ = lambda self : None;
    def open(self, *args): return exlib_window_swig_py.sg_gl2ps_action_open(self, *args)
    def close(self): return exlib_window_swig_py.sg_gl2ps_action_close(self)
sg_gl2ps_action_swigregister = exlib_window_swig_py.sg_gl2ps_action_swigregister
sg_gl2ps_action_swigregister(sg_gl2ps_action)


def sg_write_paper(*args):
  return exlib_window_swig_py.sg_write_paper(*args)
sg_write_paper = exlib_window_swig_py.sg_write_paper
class session(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = exlib_window_swig_py.delete_session
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_session(*args)
        try: self.this.append(this)
        except: self.this = this
    def out(self): return exlib_window_swig_py.session_out(self)
    def is_valid(self): return exlib_window_swig_py.session_is_valid(self)
    def steer(self): return exlib_window_swig_py.session_steer(self)
    def sync(self): return exlib_window_swig_py.session_sync(self)
session_swigregister = exlib_window_swig_py.session_swigregister
session_swigregister(session)

class plotter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_plotter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_plotter
    __del__ = lambda self : None;
    def has_window(self): return exlib_window_swig_py.plotter_has_window(self)
    def show(self): return exlib_window_swig_py.plotter_show(self)
    def steer(self): return exlib_window_swig_py.plotter_steer(self)
    def width(self): return exlib_window_swig_py.plotter_width(self)
    def height(self): return exlib_window_swig_py.plotter_height(self)
    def sg(self, *args): return exlib_window_swig_py.plotter_sg(self, *args)
    def plots(self, *args): return exlib_window_swig_py.plotter_plots(self, *args)
    def plot(self, *args): return exlib_window_swig_py.plotter_plot(self, *args)
    def plot_cp(self, *args): return exlib_window_swig_py.plotter_plot_cp(self, *args)
plotter_swigregister = exlib_window_swig_py.plotter_swigregister
plotter_swigregister(plotter)

class gui_viewer_window(gui_viewer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_gui_viewer_window(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_gui_viewer_window
    __del__ = lambda self : None;
    def has_window(self): return exlib_window_swig_py.gui_viewer_window_has_window(self)
    def show(self): return exlib_window_swig_py.gui_viewer_window_show(self)
    def steer(self): return exlib_window_swig_py.gui_viewer_window_steer(self)
gui_viewer_window_swigregister = exlib_window_swig_py.gui_viewer_window_swigregister
gui_viewer_window_swigregister(gui_viewer_window)

class gui_plotter(gui_viewer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_gui_plotter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_gui_plotter
    __del__ = lambda self : None;
    def has_window(self): return exlib_window_swig_py.gui_plotter_has_window(self)
    def show(self): return exlib_window_swig_py.gui_plotter_show(self)
    def steer(self): return exlib_window_swig_py.gui_plotter_steer(self)
    def plots(self, *args): return exlib_window_swig_py.gui_plotter_plots(self, *args)
    def plot(self, *args): return exlib_window_swig_py.gui_plotter_plot(self, *args)
    def plot_cp(self, *args): return exlib_window_swig_py.gui_plotter_plot_cp(self, *args)
gui_plotter_swigregister = exlib_window_swig_py.gui_plotter_swigregister
gui_plotter_swigregister(gui_plotter)

class sg_viewer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = exlib_window_swig_py.new_sg_viewer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = exlib_window_swig_py.delete_sg_viewer
    __del__ = lambda self : None;
    def has_window(self): return exlib_window_swig_py.sg_viewer_has_window(self)
    def show(self): return exlib_window_swig_py.sg_viewer_show(self)
    def width(self): return exlib_window_swig_py.sg_viewer_width(self)
    def height(self): return exlib_window_swig_py.sg_viewer_height(self)
    def sg(self, *args): return exlib_window_swig_py.sg_viewer_sg(self, *args)
sg_viewer_swigregister = exlib_window_swig_py.sg_viewer_swigregister
sg_viewer_swigregister(sg_viewer)



