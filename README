
  Note that the access to Python to build is in the shell script:
    <install_path>/bush/use/Python
 The upper is for using a Python2.x, which is the default in bush scripts.
 If using a Python3, it is in:     
    <install_path>/bush/use/Python3
 Then, if needed, customize these files according your Python installation. When running, see
 the "IMPORTANT" notice below.

  To build the inlib_swig_py.so, exlib_offscreen_swig_py.so, exlib_window_swig_py.so modules
 wrapping inlib/exlib with swig:
    UNIX> cd <install_path>/inexlib/exlib/examples/py
    UNIX> ./build
 To build with Python3:
    UNIX> ./build -py3

 (You can use the "-v" option to have coarse graining verbosity, or "-x" for a full traceback).
 (UNIX is for Linux, macOS or Windows-10/cygwin).

 To build some C++ examples activating Python:
    UNIX> cd <install_path>/inexlib/exlib/examples/cpp
    UNIX> ./build
 or one by one:
    UNIX> ./build hello_py.cpp            # to check Python activation from C++.
    UNIX> ./build h1d_spy.cpp             # inlib histogram wrapped with swig.
    UNIX> ./build plotter_spy_screen.cpp  # exlib plotting wrapped with swig.
    UNIX> ./build mandel_py.cpp           # check calling a C++ function from Python.
 To build with Python3:
    UNIX> ./build -py3

 To build pure C++ examples being client to the inexlib_serv application:
    UNIX> cd <install_path>/inexlib/inlib/examples/cpp
    UNIX> ./build
 or one by one:
    UNIX> ./build cube_to_sg_serv.cpp
    UNIX> ./build lego_to_sg_serv.cpp
    
 To build the distribution:
    UNIX> cd <install_path>/inexlib/exlib/examples/cpp
    UNIX> ./distrib_inexlib_py
 At end, you should have a:
    <bin_dir>/distrib/inexlib_py-<version>-<platform>.zip
 ready for distribution.

  To install and run:
    UNIX> cd <somewhere>
    UNIX> <get inexlib_py-<version>-<platform>.zip>
    UNIX> unzip -q inexlib_py-<version>-<platform>.zip
    UNIX> cd inexlib_py/<version>
    UNIX> <read the README file found here>
